{
  "api/Texim.BgMode.html": {
    "href": "api/Texim.BgMode.html",
    "title": "Enum BgMode | Texim extensible image API",
    "keywords": "Enum BgMode Namespace : Texim Assembly : Texim.dll Syntax public enum BgMode : int Fields Name Description Affine Extended Text"
  },
  "api/Texim.CollectionExtensions.html": {
    "href": "api/Texim.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Texim extensible image API",
    "keywords": "Class CollectionExtensions Inheritance Object CollectionExtensions Namespace : Texim Assembly : Texim.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source Add<T>(Collection<T>, IEnumerable<T>) Declaration public static void Add<T>(this Collection<T> collection, IEnumerable<T> source) Parameters Type Name Description Collection <T> collection IEnumerable <T> source Type Parameters Name Description T"
  },
  "api/Texim.ColorExtension.html": {
    "href": "api/Texim.ColorExtension.html",
    "title": "Class ColorExtension | Texim extensible image API",
    "keywords": "Class ColorExtension Inheritance Object ColorExtension Namespace : Texim Assembly : Texim.dll Syntax public static class ColorExtension : object Methods | Improve this Doc View Source CompareTo(Color, Color) Declaration public static int CompareTo(this Color c1, Color c2) Parameters Type Name Description Color c1 Color c2 Returns Type Description Int32 | Improve this Doc View Source GetDistance(Color, Color) Declaration public static double GetDistance(this Color c1, Color c2) Parameters Type Name Description Color c1 Color c2 Returns Type Description Double | Improve this Doc View Source GetDistanceSquared(Color, Color) Declaration public static double GetDistanceSquared(this Color c1, Color c2) Parameters Type Name Description Color c1 Color c2 Returns Type Description Double | Improve this Doc View Source ToArgb(Color) Declaration public static uint ToArgb(this Color color) Parameters Type Name Description Color color Returns Type Description UInt32 | Improve this Doc View Source ToArgbColor(UInt32) Declaration public static Color ToArgbColor(this uint argb) Parameters Type Name Description UInt32 argb Returns Type Description Color | Improve this Doc View Source ToArgbColors(UInt32[]) Declaration public static Color[] ToArgbColors(this uint[] argb) Parameters Type Name Description UInt32 [] argb Returns Type Description Color [] | Improve this Doc View Source ToBgr555(Color) Declaration public static ushort ToBgr555(this Color color) Parameters Type Name Description Color color Returns Type Description UInt16 | Improve this Doc View Source ToBgr555(Color[]) Declaration public static byte[] ToBgr555(this Color[] colors) Parameters Type Name Description Color [] colors Returns Type Description Byte [] | Improve this Doc View Source ToBgr555Color(UInt16) Declaration public static Color ToBgr555Color(this ushort value) Parameters Type Name Description UInt16 value Returns Type Description Color | Improve this Doc View Source ToBgr555Colors(Byte[]) Declaration public static Color[] ToBgr555Colors(this byte[] values) Parameters Type Name Description Byte [] values Returns Type Description Color []"
  },
  "api/Texim.ColorFormat.html": {
    "href": "api/Texim.ColorFormat.html",
    "title": "Enum ColorFormat | Texim extensible image API",
    "keywords": "Enum ColorFormat Namespace : Texim Assembly : Texim.dll Syntax public enum ColorFormat : int Fields Name Description ABGR_32bpp ABGR555_16bpp BGRA_32bpp Indexed_1bpp Indexed_2bpp Indexed_4bpp Indexed_8bpp Indexed_A3I5 Indexed_A4I4 Indexed_A5I3 Texeled_4x4 Unknown Extension Methods ColorFormatExtension.Bpp() ColorFormatExtension.MaxColors() ColorFormatExtension.IsIndexed() ColorFormatExtension.UnpackColor(UInt32) ColorFormatExtension.PackColor(UInt32)"
  },
  "api/Texim.ColorFormatExtension.html": {
    "href": "api/Texim.ColorFormatExtension.html",
    "title": "Class ColorFormatExtension | Texim extensible image API",
    "keywords": "Class ColorFormatExtension Inheritance Object ColorFormatExtension Namespace : Texim Assembly : Texim.dll Syntax public static class ColorFormatExtension : object Methods | Improve this Doc View Source Bpp(ColorFormat) Declaration public static int Bpp(this ColorFormat format) Parameters Type Name Description ColorFormat format Returns Type Description Int32 | Improve this Doc View Source IsIndexed(ColorFormat) Declaration public static bool IsIndexed(this ColorFormat format) Parameters Type Name Description ColorFormat format Returns Type Description Boolean | Improve this Doc View Source MaxColors(ColorFormat) Declaration public static int MaxColors(this ColorFormat format) Parameters Type Name Description ColorFormat format Returns Type Description Int32 | Improve this Doc View Source PackColor(ColorFormat, UInt32) Declaration public static uint PackColor(this ColorFormat format, uint pxInfo) Parameters Type Name Description ColorFormat format UInt32 pxInfo Returns Type Description UInt32 | Improve this Doc View Source UnpackColor(ColorFormat, UInt32) Declaration public static uint UnpackColor(this ColorFormat format, uint info) Parameters Type Name Description ColorFormat format UInt32 info Returns Type Description UInt32"
  },
  "api/Texim.Colors.Bgr555.html": {
    "href": "api/Texim.Colors.Bgr555.html",
    "title": "Class Bgr555 | Texim extensible image API",
    "keywords": "Class Bgr555 Inheritance Object Bgr555 Implements IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Bgr555 : object, IColorEncoding Properties | Improve this Doc View Source BytesPerColor Declaration public static int BytesPerColor { get; } Property Value Type Description Int32 | Improve this Doc View Source Instance Declaration public static Bgr555 Instance { get; } Property Value Type Description Bgr555 Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration public Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] | Improve this Doc View Source Decode(Stream) Declaration public Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb | Improve this Doc View Source Decode(Stream, Int32) Declaration public Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] | Improve this Doc View Source Encode(IEnumerable<Rgb>) Declaration public byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] | Improve this Doc View Source Encode(Rgb) Declaration public byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte [] | Improve this Doc View Source FromUInt16(UInt16) Declaration public static Rgb FromUInt16(ushort value) Parameters Type Name Description UInt16 value Returns Type Description Rgb | Improve this Doc View Source ToUInt16(Rgb) Declaration public static ushort ToUInt16(Rgb color) Parameters Type Name Description Rgb color Returns Type Description UInt16 Implements IColorEncoding"
  },
  "api/Texim.Colors.html": {
    "href": "api/Texim.Colors.html",
    "title": "Namespace Texim.Colors | Texim extensible image API",
    "keywords": "Namespace Texim.Colors Classes Bgr555 IOExtensions Rgb32 Rgba32 Structs Rgb Interfaces IColorEncoding"
  },
  "api/Texim.Colors.IColorEncoding.html": {
    "href": "api/Texim.Colors.IColorEncoding.html",
    "title": "Interface IColorEncoding | Texim extensible image API",
    "keywords": "Interface IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public interface IColorEncoding Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] | Improve this Doc View Source Decode(Stream) Declaration Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb | Improve this Doc View Source Decode(Stream, Int32) Declaration Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] | Improve this Doc View Source Encode(IEnumerable<Rgb>) Declaration byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] | Improve this Doc View Source Encode(Rgb) Declaration byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte []"
  },
  "api/Texim.Colors.IOExtensions.html": {
    "href": "api/Texim.Colors.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Colors Assembly : Texim.dll Syntax public static class IOExtensions : object Methods | Improve this Doc View Source ReadColor<T>(DataReader) Declaration public static Rgb ReadColor<T>(this DataReader reader) where T : IColorEncoding, new() Parameters Type Name Description DataReader reader Returns Type Description Rgb Type Parameters Name Description T | Improve this Doc View Source ReadColors<T>(DataReader, Int32) Declaration public static Rgb[] ReadColors<T>(this DataReader reader, int numColors) where T : IColorEncoding, new() Parameters Type Name Description DataReader reader Int32 numColors Returns Type Description Rgb [] Type Parameters Name Description T | Improve this Doc View Source Write<T>(DataWriter, IEnumerable<Rgb>) Declaration public static void Write<T>(this DataWriter writer, IEnumerable<Rgb> colors) where T : IColorEncoding, new() Parameters Type Name Description DataWriter writer IEnumerable < Rgb > colors Type Parameters Name Description T | Improve this Doc View Source Write<T>(DataWriter, Rgb) Declaration public static void Write<T>(this DataWriter writer, Rgb color) where T : IColorEncoding, new() Parameters Type Name Description DataWriter writer Rgb color Type Parameters Name Description T"
  },
  "api/Texim.Colors.Rgb.html": {
    "href": "api/Texim.Colors.Rgb.html",
    "title": "Struct Rgb | Texim extensible image API",
    "keywords": "Struct Rgb Namespace : Texim.Colors Assembly : Texim.dll Syntax public struct Rgb Constructors | Improve this Doc View Source Rgb(Byte, Byte, Byte) Declaration public Rgb(byte red, byte green, byte blue) Parameters Type Name Description Byte red Byte green Byte blue | Improve this Doc View Source Rgb(Byte, Byte, Byte, Byte) Declaration public Rgb(byte red, byte green, byte blue, byte alpha) Parameters Type Name Description Byte red Byte green Byte blue Byte alpha Properties | Improve this Doc View Source Alpha Declaration public byte Alpha { get; } Property Value Type Description Byte | Improve this Doc View Source Blue Declaration public byte Blue { get; } Property Value Type Description Byte | Improve this Doc View Source Green Declaration public byte Green { get; } Property Value Type Description Byte | Improve this Doc View Source Red Declaration public byte Red { get; } Property Value Type Description Byte Methods | Improve this Doc View Source ToColor() Declaration public Color ToColor() Returns Type Description Color"
  },
  "api/Texim.Colors.Rgb32.html": {
    "href": "api/Texim.Colors.Rgb32.html",
    "title": "Class Rgb32 | Texim extensible image API",
    "keywords": "Class Rgb32 Inheritance Object Rgba32 Rgb32 Implements IColorEncoding Inherited Members Rgba32.BytesPerColor Rgba32.Decode(Stream) Rgba32.Decode(Stream, Int32) Rgba32.Decode(Span<Byte>) Rgba32.Encode(Rgb) Rgba32.Encode(IEnumerable<Rgb>) Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Rgb32 : Rgba32, IColorEncoding Constructors | Improve this Doc View Source Rgb32() Declaration public Rgb32() Properties | Improve this Doc View Source Instance Declaration public static Rgb32 Instance { get; } Property Value Type Description Rgb32 Implements IColorEncoding"
  },
  "api/Texim.Colors.Rgba32.html": {
    "href": "api/Texim.Colors.Rgba32.html",
    "title": "Class Rgba32 | Texim extensible image API",
    "keywords": "Class Rgba32 Inheritance Object Rgba32 Rgb32 Implements IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Rgba32 : object, IColorEncoding Constructors | Improve this Doc View Source Rgba32() Declaration public Rgba32() Properties | Improve this Doc View Source BytesPerColor Declaration public static int BytesPerColor { get; } Property Value Type Description Int32 | Improve this Doc View Source Instance Declaration public static Rgba32 Instance { get; } Property Value Type Description Rgba32 Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration public Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] | Improve this Doc View Source Decode(Stream) Declaration public Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb | Improve this Doc View Source Decode(Stream, Int32) Declaration public Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] | Improve this Doc View Source Encode(IEnumerable<Rgb>) Declaration public byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] | Improve this Doc View Source Encode(Rgb) Declaration public byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte [] Implements IColorEncoding"
  },
  "api/Texim.CompressMapping.html": {
    "href": "api/Texim.CompressMapping.html",
    "title": "Class CompressMapping | Texim extensible image API",
    "keywords": "Class CompressMapping Inheritance Object Mapable CompressMapping MatchMapping Inherited Members Mapable.mappedImage Mapable.mapInfo Mapable.TileSize Mapable.GetMappedImage() Mapable.GetMapInfo() Mapable.Search(Pixel[], List<Pixel[]>) Namespace : Texim Assembly : Texim.dll Syntax public class CompressMapping : Mapable Methods | Improve this Doc View Source Map(Pixel[]) Declaration public override void Map(Pixel[] image) Parameters Type Name Description Pixel [] image Overrides Mapable.Map(Pixel[]) | Improve this Doc View Source Map(Pixel[], Int32[]) Declaration public override void Map(Pixel[] image, int[] palettes) Parameters Type Name Description Pixel [] image Int32 [] palettes Overrides Mapable.Map(Pixel[], Int32[]) | Improve this Doc View Source Search(Pixel[], List<Pixel[]>, System.Drawing.Size, out Boolean, out Boolean) Declaration protected static int Search(Pixel[] tile, List<Pixel[]> tiles, System.Drawing.Size tileSize, out bool flipX, out bool flipY) Parameters Type Name Description Pixel [] tile List < Pixel []> tiles System.Drawing.Size tileSize Boolean flipX Boolean flipY Returns Type Description Int32"
  },
  "api/Texim.Formats.html": {
    "href": "api/Texim.Formats.html",
    "title": "Namespace Texim.Formats | Texim extensible image API",
    "keywords": "Namespace Texim.Formats Classes Palette2BinaryBitmap Palette2BinaryRiff PaletteCollection2ContainerBitmap RawBinary2Palette RawPaletteParameters"
  },
  "api/Texim.Formats.Palette2BinaryBitmap.html": {
    "href": "api/Texim.Formats.Palette2BinaryBitmap.html",
    "title": "Class Palette2BinaryBitmap | Texim extensible image API",
    "keywords": "Class Palette2BinaryBitmap Inheritance Object Palette2BinaryBitmap Implements IConverter < IPalette , BinaryFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Palette2BinaryBitmap : IInitializer<ImageFormat>, IConverter<IPalette, BinaryFormat> Methods | Improve this Doc View Source Convert(IPalette) Declaration public BinaryFormat Convert(IPalette source) Parameters Type Name Description IPalette source Returns Type Description BinaryFormat | Improve this Doc View Source Initialize(ImageFormat) Declaration public void Initialize(ImageFormat parameters) Parameters Type Name Description ImageFormat parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.Palette2BinaryRiff.html": {
    "href": "api/Texim.Formats.Palette2BinaryRiff.html",
    "title": "Class Palette2BinaryRiff | Texim extensible image API",
    "keywords": "Class Palette2BinaryRiff Inheritance Object Palette2BinaryRiff Implements IConverter < IPalette , BinaryFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Palette2BinaryRiff : IInitializer<bool>, IConverter<IPalette, BinaryFormat> Properties | Improve this Doc View Source GimpCompatibility Declaration public bool GimpCompatibility { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Version Declaration public static int Version { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Convert(IPalette) Declaration public BinaryFormat Convert(IPalette palette) Parameters Type Name Description IPalette palette Returns Type Description BinaryFormat | Improve this Doc View Source Initialize(Boolean) Declaration public void Initialize(bool parameters) Parameters Type Name Description Boolean parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.PaletteCollection2ContainerBitmap.html": {
    "href": "api/Texim.Formats.PaletteCollection2ContainerBitmap.html",
    "title": "Class PaletteCollection2ContainerBitmap | Texim extensible image API",
    "keywords": "Class PaletteCollection2ContainerBitmap Inheritance Object PaletteCollection2ContainerBitmap Implements IConverter < PaletteCollection , NodeContainerFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class PaletteCollection2ContainerBitmap : IInitializer<ImageFormat>, IConverter<PaletteCollection, NodeContainerFormat> Methods | Improve this Doc View Source Convert(PaletteCollection) Declaration public NodeContainerFormat Convert(PaletteCollection source) Parameters Type Name Description PaletteCollection source Returns Type Description NodeContainerFormat | Improve this Doc View Source Initialize(ImageFormat) Declaration public void Initialize(ImageFormat parameters) Parameters Type Name Description ImageFormat parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.RawBinary2Palette.html": {
    "href": "api/Texim.Formats.RawBinary2Palette.html",
    "title": "Class RawBinary2Palette | Texim extensible image API",
    "keywords": "Class RawBinary2Palette Inheritance Object RawBinary2Palette Implements IConverter < BinaryFormat , Palette > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawBinary2Palette : IInitializer<RawPaletteParameters>, IConverter<BinaryFormat, Palette> Methods | Improve this Doc View Source Convert(BinaryFormat) Declaration public Palette Convert(BinaryFormat source) Parameters Type Name Description BinaryFormat source Returns Type Description Palette | Improve this Doc View Source Initialize(RawPaletteParameters) Declaration public void Initialize(RawPaletteParameters parameters) Parameters Type Name Description RawPaletteParameters parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.RawPaletteParameters.html": {
    "href": "api/Texim.Formats.RawPaletteParameters.html",
    "title": "Class RawPaletteParameters | Texim extensible image API",
    "keywords": "Class RawPaletteParameters Inheritance Object RawPaletteParameters Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawPaletteParameters : object Properties | Improve this Doc View Source ColorEncoding Declaration public IColorEncoding ColorEncoding { get; set; } Property Value Type Description IColorEncoding | Improve this Doc View Source Default Declaration public static RawPaletteParameters Default { get; } Property Value Type Description RawPaletteParameters | Improve this Doc View Source Offset Declaration public long Offset { get; set; } Property Value Type Description Int64 | Improve this Doc View Source Size Declaration public int Size { get; set; } Property Value Type Description Int32"
  },
  "api/Texim.html": {
    "href": "api/Texim.html",
    "title": "Namespace Texim | Texim extensible image API",
    "keywords": "Namespace Texim Classes CollectionExtensions ColorExtension ColorFormatExtension CompressMapping ImageConverter ImageMapConverter Map Mapable MatchMapping Palette PixelArray PixelEncodingExtension PixelExtension Structs MapInfo Pixel Enums BgMode ColorFormat PixelEncoding"
  },
  "api/Texim.ImageConverter.html": {
    "href": "api/Texim.ImageConverter.html",
    "title": "Class ImageConverter | Texim extensible image API",
    "keywords": "Class ImageConverter Inheritance Object ImageConverter Namespace : Texim Assembly : Texim.dll Syntax public class ImageConverter : IConverter<Bitmap, Tuple<Palette, PixelArray>> Constructors | Improve this Doc View Source ImageConverter() Declaration public ImageConverter() Properties | Improve this Doc View Source Format Declaration public ColorFormat Format { get; set; } Property Value Type Description ColorFormat | Improve this Doc View Source PixelEncoding Declaration public PixelEncoding PixelEncoding { get; set; } Property Value Type Description PixelEncoding | Improve this Doc View Source Quantization Declaration public ColorQuantization Quantization { get; set; } Property Value Type Description ColorQuantization | Improve this Doc View Source TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Convert(Bitmap) Declaration public Tuple<Palette, PixelArray> Convert(Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Returns Type Description Tuple < Palette , PixelArray >"
  },
  "api/Texim.ImageMapConverter.html": {
    "href": "api/Texim.ImageMapConverter.html",
    "title": "Class ImageMapConverter | Texim extensible image API",
    "keywords": "Class ImageMapConverter Inheritance Object ImageMapConverter Namespace : Texim Assembly : Texim.dll Syntax public class ImageMapConverter : IConverter<Bitmap, Tuple<Palette, PixelArray, MapInfo[]>> Constructors | Improve this Doc View Source ImageMapConverter() Declaration public ImageMapConverter() Properties | Improve this Doc View Source BgMode Declaration public BgMode BgMode { get; set; } Property Value Type Description BgMode | Improve this Doc View Source Format Declaration public ColorFormat Format { get; set; } Property Value Type Description ColorFormat | Improve this Doc View Source PixelEncoding Declaration public PixelEncoding PixelEncoding { get; set; } Property Value Type Description PixelEncoding | Improve this Doc View Source Quantization Declaration public ColorQuantization Quantization { get; set; } Property Value Type Description ColorQuantization | Improve this Doc View Source TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Convert(Bitmap) Declaration public Tuple<Palette, PixelArray, MapInfo[]> Convert(Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Returns Type Description Tuple < Palette , PixelArray , MapInfo []>"
  },
  "api/Texim.Map.html": {
    "href": "api/Texim.Map.html",
    "title": "Class Map | Texim extensible image API",
    "keywords": "Class Map Inheritance Object Map Namespace : Texim Assembly : Texim.dll Syntax public class Map : IFormat Constructors | Improve this Doc View Source Map() Declaration public Map() Properties | Improve this Doc View Source BgMode Declaration public BgMode BgMode { get; set; } Property Value Type Description BgMode | Improve this Doc View Source Height Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Mapping Declaration public Mapable Mapping { get; set; } Property Value Type Description Mapable | Improve this Doc View Source TileSize Declaration public System.Drawing.Size TileSize { get; set; } Property Value Type Description System.Drawing.Size | Improve this Doc View Source Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateBitmap(PixelArray, Palette) Declaration public Bitmap CreateBitmap(PixelArray image, Palette palette) Parameters Type Name Description PixelArray image Palette palette Returns Type Description Bitmap | Improve this Doc View Source CreateMap(Pixel[]) Declaration public Pixel[] CreateMap(Pixel[] pixels) Parameters Type Name Description Pixel [] pixels Returns Type Description Pixel [] | Improve this Doc View Source CreateMap(Pixel[], Int32[]) Declaration public Pixel[] CreateMap(Pixel[] pixels, int[] palettes) Parameters Type Name Description Pixel [] pixels Int32 [] palettes Returns Type Description Pixel [] | Improve this Doc View Source GetMapInfo() Declaration public MapInfo[] GetMapInfo() Returns Type Description MapInfo [] | Improve this Doc View Source SetMapInfo(MapInfo[]) Declaration public void SetMapInfo(MapInfo[] mapInfo) Parameters Type Name Description MapInfo [] mapInfo"
  },
  "api/Texim.Mapable.html": {
    "href": "api/Texim.Mapable.html",
    "title": "Class Mapable | Texim extensible image API",
    "keywords": "Class Mapable Inheritance Object Mapable CompressMapping Namespace : Texim Assembly : Texim.dll Syntax public abstract class Mapable : object Constructors | Improve this Doc View Source Mapable() Declaration public Mapable() Fields | Improve this Doc View Source mapInfo Declaration protected MapInfo[] mapInfo Field Value Type Description MapInfo [] | Improve this Doc View Source mappedImage Declaration protected Pixel[] mappedImage Field Value Type Description Pixel [] Properties | Improve this Doc View Source TileSize Declaration public System.Drawing.Size TileSize { get; set; } Property Value Type Description System.Drawing.Size Methods | Improve this Doc View Source GetMapInfo() Declaration public MapInfo[] GetMapInfo() Returns Type Description MapInfo [] | Improve this Doc View Source GetMappedImage() Declaration public Pixel[] GetMappedImage() Returns Type Description Pixel [] | Improve this Doc View Source Map(Pixel[]) Declaration public abstract void Map(Pixel[] image) Parameters Type Name Description Pixel [] image | Improve this Doc View Source Map(Pixel[], Int32[]) Declaration public abstract void Map(Pixel[] image, int[] palettes) Parameters Type Name Description Pixel [] image Int32 [] palettes | Improve this Doc View Source Search(Pixel[], List<Pixel[]>) Declaration protected static int Search(Pixel[] tile, List<Pixel[]> tiles) Parameters Type Name Description Pixel [] tile List < Pixel []> tiles Returns Type Description Int32"
  },
  "api/Texim.MapInfo.html": {
    "href": "api/Texim.MapInfo.html",
    "title": "Struct MapInfo | Texim extensible image API",
    "keywords": "Struct MapInfo Namespace : Texim Assembly : Texim.dll Syntax public struct MapInfo Constructors | Improve this Doc View Source MapInfo(Byte) Initializes a new instance of the struct. Affine (rotation / scaling) mode. Declaration public MapInfo(byte value) Parameters Type Name Description Byte value Value. | Improve this Doc View Source MapInfo(Int32, Int32, Boolean, Boolean) Declaration public MapInfo(int tileIndex, int paletteIndex, bool flipX, bool flipY) Parameters Type Name Description Int32 tileIndex Int32 paletteIndex Boolean flipX Boolean flipY | Improve this Doc View Source MapInfo(UInt16) Initializes a new instance of the struct. Text and extended mode. Declaration public MapInfo(ushort value) Parameters Type Name Description UInt16 value Value. Properties | Improve this Doc View Source FlipX Declaration public bool FlipX { get; } Property Value Type Description Boolean | Improve this Doc View Source FlipY Declaration public bool FlipY { get; } Property Value Type Description Boolean | Improve this Doc View Source PaletteIndex Declaration public int PaletteIndex { get; } Property Value Type Description Int32 | Improve this Doc View Source TileIndex Declaration public int TileIndex { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ToByte() Declaration public byte ToByte() Returns Type Description Byte | Improve this Doc View Source ToUInt16() Declaration public ushort ToUInt16() Returns Type Description UInt16"
  },
  "api/Texim.MatchMapping.html": {
    "href": "api/Texim.MatchMapping.html",
    "title": "Class MatchMapping | Texim extensible image API",
    "keywords": "Class MatchMapping Inheritance Object Mapable CompressMapping MatchMapping Inherited Members CompressMapping.Map(Pixel[], Int32[]) CompressMapping.Search(Pixel[], List<Pixel[]>, System.Drawing.Size, Boolean, Boolean) Mapable.mappedImage Mapable.mapInfo Mapable.TileSize Mapable.GetMappedImage() Mapable.GetMapInfo() Mapable.Search(Pixel[], List<Pixel[]>) Namespace : Texim Assembly : Texim.dll Syntax public class MatchMapping : CompressMapping Constructors | Improve this Doc View Source MatchMapping(Pixel[]) Declaration public MatchMapping(Pixel[] mappedImage) Parameters Type Name Description Pixel [] mappedImage Methods | Improve this Doc View Source Map(Pixel[]) Declaration public override void Map(Pixel[] image) Parameters Type Name Description Pixel [] image Overrides CompressMapping.Map(Pixel[])"
  },
  "api/Texim.Palette.html": {
    "href": "api/Texim.Palette.html",
    "title": "Class Palette | Texim extensible image API",
    "keywords": "Class Palette Inheritance Object Palette Namespace : Texim Assembly : Texim.dll Syntax public class Palette : IFormat Constructors | Improve this Doc View Source Palette() Declaration public Palette() | Improve this Doc View Source Palette(Color[]) Declaration public Palette(Color[] palette) Parameters Type Name Description Color [] palette | Improve this Doc View Source Palette(Color[][]) Declaration public Palette(Color[][] palette) Parameters Type Name Description Color [][] palette Properties | Improve this Doc View Source NumPalettes Declaration public int NumPalettes { get; } Property Value Type Description Int32 | Improve this Doc View Source Palettes Declaration public IEnumerable<Color[]> Palettes { get; } Property Value Type Description IEnumerable < Color []> Methods | Improve this Doc View Source CreateBitmap(Color[]) Declaration public static Bitmap CreateBitmap(Color[] colors) Parameters Type Name Description Color [] colors Returns Type Description Bitmap | Improve this Doc View Source CreateBitmap(Int32) Declaration public Bitmap CreateBitmap(int index) Parameters Type Name Description Int32 index Returns Type Description Bitmap | Improve this Doc View Source GetColor(Int32, Int32) Declaration public Color GetColor(int paletteIndex, int colorIndex) Parameters Type Name Description Int32 paletteIndex Int32 colorIndex Returns Type Description Color | Improve this Doc View Source GetPalette(Int32) Declaration public Color[] GetPalette(int index) Parameters Type Name Description Int32 index Returns Type Description Color [] | Improve this Doc View Source GetPalettes() Declaration public Color[][] GetPalettes() Returns Type Description Color [][] | Improve this Doc View Source SetPalette(Color[]) Declaration public void SetPalette(Color[] palette) Parameters Type Name Description Color [] palette | Improve this Doc View Source SetPalette(Color[][]) Declaration public void SetPalette(Color[][] palette) Parameters Type Name Description Color [][] palette | Improve this Doc View Source ToAcoFormat(String, Int32) Declaration public void ToAcoFormat(string outPath, int index) Parameters Type Name Description String outPath Int32 index | Improve this Doc View Source ToWinPaletteFormat(String, Int32, Boolean) Declaration public void ToWinPaletteFormat(string outPath, int index, bool gimpCompability) Parameters Type Name Description String outPath Int32 index Boolean gimpCompability"
  },
  "api/Texim.Palettes.html": {
    "href": "api/Texim.Palettes.html",
    "title": "Namespace Texim.Palettes | Texim extensible image API",
    "keywords": "Namespace Texim.Palettes Classes Palette PaletteCollection Interfaces IPalette IPaletteCollection"
  },
  "api/Texim.Palettes.IPalette.html": {
    "href": "api/Texim.Palettes.IPalette.html",
    "title": "Interface IPalette | Texim extensible image API",
    "keywords": "Interface IPalette Namespace : Texim.Palettes Assembly : Texim.dll Syntax public interface IPalette : IFormat Properties | Improve this Doc View Source Colors Declaration Collection<Rgb> Colors { get; } Property Value Type Description Collection < Rgb >"
  },
  "api/Texim.Palettes.IPaletteCollection.html": {
    "href": "api/Texim.Palettes.IPaletteCollection.html",
    "title": "Interface IPaletteCollection | Texim extensible image API",
    "keywords": "Interface IPaletteCollection Namespace : Texim.Palettes Assembly : Texim.dll Syntax public interface IPaletteCollection : IFormat Properties | Improve this Doc View Source Palettes Declaration Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette >"
  },
  "api/Texim.Palettes.Palette.html": {
    "href": "api/Texim.Palettes.Palette.html",
    "title": "Class Palette | Texim extensible image API",
    "keywords": "Class Palette Inheritance Object Palette Implements IPalette IFormat Namespace : Texim.Palettes Assembly : Texim.dll Syntax public class Palette : object, IPalette, IFormat Constructors | Improve this Doc View Source Palette() Declaration public Palette() | Improve this Doc View Source Palette(IEnumerable<Rgb>) Declaration public Palette(IEnumerable<Rgb> initialColors) Parameters Type Name Description IEnumerable < Rgb > initialColors Properties | Improve this Doc View Source Colors Declaration public Collection<Rgb> Colors { get; } Property Value Type Description Collection < Rgb > Implements IPalette IFormat"
  },
  "api/Texim.Palettes.PaletteCollection.html": {
    "href": "api/Texim.Palettes.PaletteCollection.html",
    "title": "Class PaletteCollection | Texim extensible image API",
    "keywords": "Class PaletteCollection Inheritance Object PaletteCollection Implements IPaletteCollection IFormat Namespace : Texim.Palettes Assembly : Texim.dll Syntax public class PaletteCollection : object, IPaletteCollection, IFormat Constructors | Improve this Doc View Source PaletteCollection() Declaration public PaletteCollection() | Improve this Doc View Source PaletteCollection(IEnumerable<IPalette>) Declaration public PaletteCollection(IEnumerable<IPalette> initialPalettes) Parameters Type Name Description IEnumerable < IPalette > initialPalettes Properties | Improve this Doc View Source Palettes Declaration public Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette > Implements IPaletteCollection IFormat"
  },
  "api/Texim.Pixel.html": {
    "href": "api/Texim.Pixel.html",
    "title": "Struct Pixel | Texim extensible image API",
    "keywords": "Struct Pixel Namespace : Texim Assembly : Texim.dll Syntax public struct Pixel Constructors | Improve this Doc View Source Pixel(UInt32, UInt32, Boolean) Declaration public Pixel(uint info, uint alpha, bool isIndexed) Parameters Type Name Description UInt32 info UInt32 alpha Boolean isIndexed Properties | Improve this Doc View Source Alpha Declaration public byte Alpha { get; } Property Value Type Description Byte | Improve this Doc View Source Info Gets the pixel info. If it's indexed it returns the color index otherwise, it returns a 32bit BGR value. Declaration public uint Info { get; } Property Value Type Description UInt32 The pixel info. | Improve this Doc View Source IsIndexed Declaration public bool IsIndexed { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ChangeInfo(UInt32) Declaration public Pixel ChangeInfo(uint info) Parameters Type Name Description UInt32 info Returns Type Description Pixel | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Texim.PixelArray.html": {
    "href": "api/Texim.PixelArray.html",
    "title": "Class PixelArray | Texim extensible image API",
    "keywords": "Class PixelArray Inheritance Object PixelArray Namespace : Texim Assembly : Texim.dll Syntax public class PixelArray : IFormat Constructors | Improve this Doc View Source PixelArray() Declaration public PixelArray() | Improve this Doc View Source PixelArray(Pixel[], Int32, Int32, PixelEncoding, ColorFormat, Size) Declaration public PixelArray(Pixel[] pixels, int width, int height, PixelEncoding pxEnc, ColorFormat format, Size tileSize) Parameters Type Name Description Pixel [] pixels Int32 width Int32 height PixelEncoding pxEnc ColorFormat format Size tileSize Properties | Improve this Doc View Source Format Declaration public ColorFormat Format { get; set; } Property Value Type Description ColorFormat | Improve this Doc View Source Height Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PixelEncoding Declaration public PixelEncoding PixelEncoding { get; } Property Value Type Description PixelEncoding | Improve this Doc View Source TileSize Declaration public Size TileSize { get; } Property Value Type Description Size | Improve this Doc View Source Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateBitmap() Declaration public Bitmap CreateBitmap() Returns Type Description Bitmap | Improve this Doc View Source CreateBitmap(Palette, Int32) Declaration public Bitmap CreateBitmap(Palette palette, int paletteIndex) Parameters Type Name Description Palette palette Int32 paletteIndex Returns Type Description Bitmap | Improve this Doc View Source CreateBitmap(Palette, UInt32[]) Declaration public Bitmap CreateBitmap(Palette palette, uint[] paletteIndex) Parameters Type Name Description Palette palette UInt32 [] paletteIndex Returns Type Description Bitmap | Improve this Doc View Source GetData() Declaration public byte[] GetData() Returns Type Description Byte [] | Improve this Doc View Source GetPixels() Declaration public Pixel[] GetPixels() Returns Type Description Pixel [] | Improve this Doc View Source GetTile(Int32) Declaration public Pixel[] GetTile(int index) Parameters Type Name Description Int32 index Returns Type Description Pixel [] | Improve this Doc View Source SetData(Byte[], PixelEncoding, ColorFormat) Declaration public void SetData(byte[] raw, PixelEncoding pixelEnc, ColorFormat format) Parameters Type Name Description Byte [] raw PixelEncoding pixelEnc ColorFormat format | Improve this Doc View Source SetData(Byte[], PixelEncoding, ColorFormat, Size) Declaration public void SetData(byte[] raw, PixelEncoding pixelEnc, ColorFormat format, Size tileSize) Parameters Type Name Description Byte [] raw PixelEncoding pixelEnc ColorFormat format Size tileSize | Improve this Doc View Source SetData(Pixel[], PixelEncoding, ColorFormat, Size) Declaration public void SetData(Pixel[] pixels, PixelEncoding pixelEnc, ColorFormat format, Size tileSize) Parameters Type Name Description Pixel [] pixels PixelEncoding pixelEnc ColorFormat format Size tileSize"
  },
  "api/Texim.PixelEncoding.html": {
    "href": "api/Texim.PixelEncoding.html",
    "title": "Enum PixelEncoding | Texim extensible image API",
    "keywords": "Enum PixelEncoding Namespace : Texim Assembly : Texim.dll Syntax public enum PixelEncoding : int Fields Name Description HorizontalTiles Lineal Unknown VerticalTiles Extension Methods PixelEncodingExtension.IsTiled() PixelEncodingExtension.Codec<T>(T[], T[], Boolean, Int32, Int32, Size) PixelEncodingExtension.GetIndex(Int32, Int32, Int32, Int32, Size)"
  },
  "api/Texim.PixelEncodingExtension.html": {
    "href": "api/Texim.PixelEncodingExtension.html",
    "title": "Class PixelEncodingExtension | Texim extensible image API",
    "keywords": "Class PixelEncodingExtension Inheritance Object PixelEncodingExtension Namespace : Texim Assembly : Texim.dll Syntax public static class PixelEncodingExtension : object Methods | Improve this Doc View Source Codec<T>(PixelEncoding, T[], T[], Boolean, Int32, Int32, Size) Declaration public static void Codec<T>(this PixelEncoding pxEnc, T[] dataIn, T[] dataOut, bool decoding, int width, int height, Size tileSize) Parameters Type Name Description PixelEncoding pxEnc T[] dataIn T[] dataOut Boolean decoding Int32 width Int32 height Size tileSize Type Parameters Name Description T | Improve this Doc View Source GetIndex(PixelEncoding, Int32, Int32, Int32, Int32, Size) Declaration public static int GetIndex(this PixelEncoding pxEnc, int x, int y, int width, int height, Size tileSize) Parameters Type Name Description PixelEncoding pxEnc Int32 x Int32 y Int32 width Int32 height Size tileSize Returns Type Description Int32 | Improve this Doc View Source IsTiled(PixelEncoding) Declaration public static bool IsTiled(this PixelEncoding enc) Parameters Type Name Description PixelEncoding enc Returns Type Description Boolean"
  },
  "api/Texim.PixelExtension.html": {
    "href": "api/Texim.PixelExtension.html",
    "title": "Class PixelExtension | Texim extensible image API",
    "keywords": "Class PixelExtension Inheritance Object PixelExtension Namespace : Texim Assembly : Texim.dll Syntax public static class PixelExtension : object Methods | Improve this Doc View Source FlipX(Pixel[], Size) Declaration public static void FlipX(this Pixel[] tile, Size tileSize) Parameters Type Name Description Pixel [] tile Size tileSize | Improve this Doc View Source FlipY(Pixel[], Size) Declaration public static void FlipY(this Pixel[] tile, Size tileSize) Parameters Type Name Description Pixel [] tile Size tileSize"
  },
  "api/Texim.Processing.BasicQuantization.html": {
    "href": "api/Texim.Processing.BasicQuantization.html",
    "title": "Class BasicQuantization | Texim extensible image API",
    "keywords": "Class BasicQuantization Inheritance Object ColorQuantization BasicQuantization Inherited Members ColorQuantization.Width ColorQuantization.Height ColorQuantization.Palette ColorQuantization.TileSize ColorQuantization.Pixels ColorQuantization.Quantizate(Bitmap) ColorQuantization.GetPixels(PixelEncoding) Namespace : Texim.Processing Assembly : Texim.dll Syntax public class BasicQuantization : ColorQuantization Constructors | Improve this Doc View Source BasicQuantization() Declaration public BasicQuantization() Properties | Improve this Doc View Source MaxColors Declaration public int MaxColors { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source PostQuantization() Declaration protected override void PostQuantization() Overrides ColorQuantization.PostQuantization() | Improve this Doc View Source PreQuantization(Bitmap) Declaration protected override void PreQuantization(Bitmap image) Parameters Type Name Description Bitmap image Overrides ColorQuantization.PreQuantization(Bitmap) | Improve this Doc View Source QuantizatePixel(Int32, Int32) Declaration protected override Pixel QuantizatePixel(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description Pixel Overrides ColorQuantization.QuantizatePixel(Int32, Int32)"
  },
  "api/Texim.Processing.ColorQuantization.html": {
    "href": "api/Texim.Processing.ColorQuantization.html",
    "title": "Class ColorQuantization | Texim extensible image API",
    "keywords": "Class ColorQuantization Inheritance Object ColorQuantization BasicQuantization FixedPaletteQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public abstract class ColorQuantization : object Constructors | Improve this Doc View Source ColorQuantization() Declaration protected ColorQuantization() Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Palette Declaration public Color[] Palette { get; protected set; } Property Value Type Description Color [] | Improve this Doc View Source Pixels Declaration protected Pixel[] Pixels { get; } Property Value Type Description Pixel [] | Improve this Doc View Source TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetPixels(PixelEncoding) Declaration public Pixel[] GetPixels(PixelEncoding enc) Parameters Type Name Description PixelEncoding enc Returns Type Description Pixel [] | Improve this Doc View Source PostQuantization() Declaration protected abstract void PostQuantization() | Improve this Doc View Source PreQuantization(Bitmap) Declaration protected abstract void PreQuantization(Bitmap image) Parameters Type Name Description Bitmap image | Improve this Doc View Source Quantizate(Bitmap) Declaration public void Quantizate(Bitmap image) Parameters Type Name Description Bitmap image | Improve this Doc View Source QuantizatePixel(Int32, Int32) Declaration protected abstract Pixel QuantizatePixel(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description Pixel"
  },
  "api/Texim.Processing.ExhaustivePaletteSearch.html": {
    "href": "api/Texim.Processing.ExhaustivePaletteSearch.html",
    "title": "Class ExhaustivePaletteSearch | Texim extensible image API",
    "keywords": "Class ExhaustivePaletteSearch Inheritance Object NearestNeighbour < Color > ExhaustivePaletteSearch Inherited Members NearestNeighbour<Color>.vertex Namespace : Texim.Processing Assembly : Texim.dll Syntax public class ExhaustivePaletteSearch : NearestNeighbour<Color> Methods | Improve this Doc View Source Initialize(Color[]) Declaration public override void Initialize(Color[] vertex) Parameters Type Name Description Color [] vertex Overrides Texim.Processing.NearestNeighbour<Color>.Initialize(Color[]) | Improve this Doc View Source Search(Color) Get the palette index of the nearest color by using exhaustive search. Declaration public override int Search(Color color) Parameters Type Name Description Color color Color to get its nearest palette color. Returns Type Description Int32 The nearest color palette index. Overrides Texim.Processing.NearestNeighbour<Color>.Search(Color)"
  },
  "api/Texim.Processing.FixedPaletteQuantization.html": {
    "href": "api/Texim.Processing.FixedPaletteQuantization.html",
    "title": "Class FixedPaletteQuantization | Texim extensible image API",
    "keywords": "Class FixedPaletteQuantization Inheritance Object ColorQuantization FixedPaletteQuantization Inherited Members ColorQuantization.Width ColorQuantization.Height ColorQuantization.Palette ColorQuantization.TileSize ColorQuantization.Pixels ColorQuantization.Quantizate(Bitmap) ColorQuantization.GetPixels(PixelEncoding) Namespace : Texim.Processing Assembly : Texim.dll Syntax public class FixedPaletteQuantization : ColorQuantization Constructors | Improve this Doc View Source FixedPaletteQuantization(Color[]) Declaration public FixedPaletteQuantization(Color[] fixedPalette) Parameters Type Name Description Color [] fixedPalette Properties | Improve this Doc View Source TransparentIndex Declaration public uint TransparentIndex { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source PostQuantization() Declaration protected override void PostQuantization() Overrides ColorQuantization.PostQuantization() | Improve this Doc View Source PreQuantization(Bitmap) Declaration protected override void PreQuantization(Bitmap image) Parameters Type Name Description Bitmap image Overrides ColorQuantization.PreQuantization(Bitmap) | Improve this Doc View Source QuantizatePixel(Int32, Int32) Declaration protected override Pixel QuantizatePixel(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description Pixel Overrides ColorQuantization.QuantizatePixel(Int32, Int32)"
  },
  "api/Texim.Processing.html": {
    "href": "api/Texim.Processing.html",
    "title": "Namespace Texim.Processing | Texim extensible image API",
    "keywords": "Namespace Texim.Processing Classes BasicQuantization ColorQuantization ExhaustivePaletteSearch FixedPaletteQuantization NearestNeighbour<T>"
  },
  "api/Texim.Processing.NearestNeighbour-1.html": {
    "href": "api/Texim.Processing.NearestNeighbour-1.html",
    "title": "Class NearestNeighbour<T> | Texim extensible image API",
    "keywords": "Class NearestNeighbour<T> Inheritance Object NearestNeighbour<T> ExhaustivePaletteSearch Namespace : Texim.Processing Assembly : Texim.dll Syntax public abstract class NearestNeighbour<T> : object Type Parameters Name Description T Fields | Improve this Doc View Source vertex Declaration protected T[] vertex Field Value Type Description T[] Methods | Improve this Doc View Source Initialize(T[]) Declaration public abstract void Initialize(T[] vertex) Parameters Type Name Description T[] vertex | Improve this Doc View Source Search(T) Declaration public abstract int Search(T point) Parameters Type Name Description T point Returns Type Description Int32"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the project | Texim extensible image API",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (April 09, 2021) | Texim extensible image API",
    "keywords": "vNext (April 09, 2021) As part of this release we had 5 issues closed. Enhancements #5 Implement NCCL format from Layton games #4 Re-implementation of color and palette API #3 Upgrade Yarhl #2 Performance test for different types of Pixel structures #1 Implement workflow and C# template repo"
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to the project | Texim extensible image API",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "index.html": {
    "href": "index.html",
    "title": "Texim | Texim extensible image API",
    "keywords": "Texim Extensible API for image-related formats. It aims to provide an API to easily implement different image, palette, sprites and animation formats. Including typical image processing algorithms for importers or hardware swizzlers of different platforms. This is a proof-of-concept project for fast prototyping. In the future it will be Yarhl.Media.Images . There aren't stable releases, only preview. The API may suffer major refactors between minor versions. <!-- prettier-ignore --> Release Package Stable None Preview Azure Artifacts Documentation Feel free to ask any question in the project Discussion site! Check our on-line documentation . Build The project requires to build .NET 5 SDK and .NET Core 3.1 runtime (Linux and MacOS require also Mono). If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  },
  "README.html": {
    "href": "README.html",
    "title": "Texim | Texim extensible image API",
    "keywords": "Texim Extensible API for image-related formats. It aims to provide an API to easily implement different image, palette, sprites and animation formats. Including typical image processing algorithms for importers or hardware swizzlers of different platforms. This is a proof-of-concept project for fast prototyping. In the future it will be Yarhl.Media.Images . There aren't stable releases, only preview. The API may suffer major refactors between minor versions. <!-- prettier-ignore --> Release Package Stable None Preview Azure Artifacts Documentation Feel free to ask any question in the project Discussion site! Check our on-line documentation . Build The project requires to build .NET 5 SDK and .NET Core 3.1 runtime (Linux and MacOS require also Mono). If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  }
}