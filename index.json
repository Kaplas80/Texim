{
  "api/Texim.CollectionExtensions.html": {
    "href": "api/Texim.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Texim extensible image API",
    "keywords": "Class CollectionExtensions Inheritance Object CollectionExtensions Namespace : Texim Assembly : Texim.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source Add<T>(Collection<T>, IEnumerable<T>) Declaration public static void Add<T>(this Collection<T> collection, IEnumerable<T> source) Parameters Type Name Description Collection <T> collection IEnumerable <T> source Type Parameters Name Description T"
  },
  "api/Texim.Colors.Bgr555.html": {
    "href": "api/Texim.Colors.Bgr555.html",
    "title": "Class Bgr555 | Texim extensible image API",
    "keywords": "Class Bgr555 Inheritance Object Bgr555 Implements IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Bgr555 : object, IColorEncoding Properties | Improve this Doc View Source BytesPerColor Declaration public static int BytesPerColor { get; } Property Value Type Description Int32 | Improve this Doc View Source Instance Declaration public static Bgr555 Instance { get; } Property Value Type Description Bgr555 Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration public Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] | Improve this Doc View Source Decode(Stream) Declaration public Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb | Improve this Doc View Source Decode(Stream, Int32) Declaration public Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] | Improve this Doc View Source Encode(IEnumerable<Rgb>) Declaration public byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] | Improve this Doc View Source Encode(Rgb) Declaration public byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte [] | Improve this Doc View Source FromUInt16(UInt16) Declaration public static Rgb FromUInt16(ushort value) Parameters Type Name Description UInt16 value Returns Type Description Rgb | Improve this Doc View Source ToUInt16(Rgb) Declaration public static ushort ToUInt16(Rgb color) Parameters Type Name Description Rgb color Returns Type Description UInt16 Implements IColorEncoding"
  },
  "api/Texim.Colors.html": {
    "href": "api/Texim.Colors.html",
    "title": "Namespace Texim.Colors | Texim extensible image API",
    "keywords": "Namespace Texim.Colors Classes Bgr555 IOExtensions Rgb32 Rgba32 Structs Rgb Interfaces IColorEncoding"
  },
  "api/Texim.Colors.IColorEncoding.html": {
    "href": "api/Texim.Colors.IColorEncoding.html",
    "title": "Interface IColorEncoding | Texim extensible image API",
    "keywords": "Interface IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public interface IColorEncoding Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] | Improve this Doc View Source Decode(Stream) Declaration Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb | Improve this Doc View Source Decode(Stream, Int32) Declaration Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] | Improve this Doc View Source Encode(IEnumerable<Rgb>) Declaration byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] | Improve this Doc View Source Encode(Rgb) Declaration byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte []"
  },
  "api/Texim.Colors.IOExtensions.html": {
    "href": "api/Texim.Colors.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Colors Assembly : Texim.dll Syntax public static class IOExtensions : object Methods | Improve this Doc View Source DecodeColorsAs<T>(Byte[]) Declaration public static Rgb[] DecodeColorsAs<T>(this byte[] data) where T : IColorEncoding, new() Parameters Type Name Description Byte [] data Returns Type Description Rgb [] Type Parameters Name Description T | Improve this Doc View Source ReadColor<T>(DataReader) Declaration public static Rgb ReadColor<T>(this DataReader reader) where T : IColorEncoding, new() Parameters Type Name Description DataReader reader Returns Type Description Rgb Type Parameters Name Description T | Improve this Doc View Source ReadColors<T>(DataReader, Int32) Declaration public static Rgb[] ReadColors<T>(this DataReader reader, int numColors) where T : IColorEncoding, new() Parameters Type Name Description DataReader reader Int32 numColors Returns Type Description Rgb [] Type Parameters Name Description T | Improve this Doc View Source Write<T>(DataWriter, IEnumerable<Rgb>) Declaration public static void Write<T>(this DataWriter writer, IEnumerable<Rgb> colors) where T : IColorEncoding, new() Parameters Type Name Description DataWriter writer IEnumerable < Rgb > colors Type Parameters Name Description T | Improve this Doc View Source Write<T>(DataWriter, Rgb) Declaration public static void Write<T>(this DataWriter writer, Rgb color) where T : IColorEncoding, new() Parameters Type Name Description DataWriter writer Rgb color Type Parameters Name Description T"
  },
  "api/Texim.Colors.Rgb.html": {
    "href": "api/Texim.Colors.Rgb.html",
    "title": "Struct Rgb | Texim extensible image API",
    "keywords": "Struct Rgb Namespace : Texim.Colors Assembly : Texim.dll Syntax public struct Rgb Constructors | Improve this Doc View Source Rgb(Color) Declaration public Rgb(Color color) Parameters Type Name Description Color color | Improve this Doc View Source Rgb(Byte, Byte, Byte) Declaration public Rgb(byte red, byte green, byte blue) Parameters Type Name Description Byte red Byte green Byte blue | Improve this Doc View Source Rgb(Byte, Byte, Byte, Byte) Declaration public Rgb(byte red, byte green, byte blue, byte alpha) Parameters Type Name Description Byte red Byte green Byte blue Byte alpha | Improve this Doc View Source Rgb(Rgb, Byte) Declaration public Rgb(Rgb color, byte alpha) Parameters Type Name Description Rgb color Byte alpha Properties | Improve this Doc View Source Alpha Declaration public byte Alpha { get; } Property Value Type Description Byte | Improve this Doc View Source Blue Declaration public byte Blue { get; } Property Value Type Description Byte | Improve this Doc View Source Green Declaration public byte Green { get; } Property Value Type Description Byte | Improve this Doc View Source Red Declaration public byte Red { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetDistanceSquared(Rgb) Declaration public double GetDistanceSquared(Rgb other) Parameters Type Name Description Rgb other Returns Type Description Double | Improve this Doc View Source ToColor() Declaration public Color ToColor() Returns Type Description Color"
  },
  "api/Texim.Colors.Rgb32.html": {
    "href": "api/Texim.Colors.Rgb32.html",
    "title": "Class Rgb32 | Texim extensible image API",
    "keywords": "Class Rgb32 Inheritance Object Rgba32 Rgb32 Implements IColorEncoding Inherited Members Rgba32.BytesPerColor Rgba32.Decode(Stream) Rgba32.Decode(Stream, Int32) Rgba32.Decode(Span<Byte>) Rgba32.Encode(Rgb) Rgba32.Encode(IEnumerable<Rgb>) Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Rgb32 : Rgba32, IColorEncoding Constructors | Improve this Doc View Source Rgb32() Declaration public Rgb32() Properties | Improve this Doc View Source Instance Declaration public static Rgb32 Instance { get; } Property Value Type Description Rgb32 Implements IColorEncoding"
  },
  "api/Texim.Colors.Rgba32.html": {
    "href": "api/Texim.Colors.Rgba32.html",
    "title": "Class Rgba32 | Texim extensible image API",
    "keywords": "Class Rgba32 Inheritance Object Rgba32 Rgb32 Implements IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Rgba32 : object, IColorEncoding Constructors | Improve this Doc View Source Rgba32() Declaration public Rgba32() Properties | Improve this Doc View Source BytesPerColor Declaration public static int BytesPerColor { get; } Property Value Type Description Int32 | Improve this Doc View Source Instance Declaration public static Rgba32 Instance { get; } Property Value Type Description Rgba32 Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration public Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] | Improve this Doc View Source Decode(Stream) Declaration public Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb | Improve this Doc View Source Decode(Stream, Int32) Declaration public Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] | Improve this Doc View Source Encode(IEnumerable<Rgb>) Declaration public byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] | Improve this Doc View Source Encode(Rgb) Declaration public byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte [] Implements IColorEncoding"
  },
  "api/Texim.Compressions.Nitro.html": {
    "href": "api/Texim.Compressions.Nitro.html",
    "title": "Namespace Texim.Compressions.Nitro | Texim extensible image API",
    "keywords": "Namespace Texim.Compressions.Nitro Classes IndexedMapImage IOExtensions MapCompression MapDecompression MapDecompressionParameters ScreenMap TileExtensions Structs MapInfo Interfaces IScreenMap"
  },
  "api/Texim.Compressions.Nitro.IndexedMapImage.html": {
    "href": "api/Texim.Compressions.Nitro.IndexedMapImage.html",
    "title": "Class IndexedMapImage | Texim extensible image API",
    "keywords": "Class IndexedMapImage Inheritance Object IndexedMapImage Implements IScreenMap IIndexedImage IFormat Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class IndexedMapImage : object, IScreenMap, IIndexedImage, IFormat Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Maps Declaration public MapInfo[] Maps { get; } Property Value Type Description MapInfo [] | Improve this Doc View Source Pixels Declaration public IndexedPixel[] Pixels { get; } Property Value Type Description IndexedPixel [] | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Implements IScreenMap IIndexedImage IFormat"
  },
  "api/Texim.Compressions.Nitro.IOExtensions.html": {
    "href": "api/Texim.Compressions.Nitro.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public static class IOExtensions : object Methods | Improve this Doc View Source ReadMapInfo(DataReader) Declaration public static MapInfo ReadMapInfo(this DataReader reader) Parameters Type Name Description DataReader reader Returns Type Description MapInfo | Improve this Doc View Source ReadMapInfos(DataReader, Int32) Declaration public static MapInfo[] ReadMapInfos(this DataReader reader, int numMaps) Parameters Type Name Description DataReader reader Int32 numMaps Returns Type Description MapInfo [] | Improve this Doc View Source Write(DataWriter, IEnumerable<MapInfo>) Declaration public static void Write(this DataWriter writer, IEnumerable<MapInfo> infos) Parameters Type Name Description DataWriter writer IEnumerable < MapInfo > infos | Improve this Doc View Source Write(DataWriter, MapInfo) Declaration public static void Write(this DataWriter writer, MapInfo info) Parameters Type Name Description DataWriter writer MapInfo info"
  },
  "api/Texim.Compressions.Nitro.IScreenMap.html": {
    "href": "api/Texim.Compressions.Nitro.IScreenMap.html",
    "title": "Interface IScreenMap | Texim extensible image API",
    "keywords": "Interface IScreenMap Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public interface IScreenMap : IFormat Properties | Improve this Doc View Source Height Declaration int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Maps Declaration MapInfo[] Maps { get; } Property Value Type Description MapInfo [] | Improve this Doc View Source Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Compressions.Nitro.MapCompression.html": {
    "href": "api/Texim.Compressions.Nitro.MapCompression.html",
    "title": "Class MapCompression | Texim extensible image API",
    "keywords": "Class MapCompression Inheritance Object MapCompression Implements IConverter < IIndexedImage , IndexedMapImage > Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapCompression : IInitializer<Size>, IConverter<IIndexedImage, IndexedMapImage> Methods | Improve this Doc View Source Convert(IIndexedImage) Declaration public IndexedMapImage Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description IndexedMapImage | Improve this Doc View Source Initialize(Size) Declaration public void Initialize(Size parameters) Parameters Type Name Description Size parameters Implements IConverter<, >"
  },
  "api/Texim.Compressions.Nitro.MapDecompression.html": {
    "href": "api/Texim.Compressions.Nitro.MapDecompression.html",
    "title": "Class MapDecompression | Texim extensible image API",
    "keywords": "Class MapDecompression Inheritance Object MapDecompression Implements IConverter < IIndexedImage , IndexedImage > IConverter < IndexedPixel [], IndexedPixel []> Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapDecompression : IInitializer<MapDecompressionParameters>, IConverter<IIndexedImage, IndexedImage>, IConverter<IndexedPixel[], IndexedPixel[]> Methods | Improve this Doc View Source Convert(IIndexedImage) Declaration public IndexedImage Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description IndexedImage | Improve this Doc View Source Convert(IndexedPixel[]) Declaration public IndexedPixel[] Convert(IndexedPixel[] source) Parameters Type Name Description IndexedPixel [] source Returns Type Description IndexedPixel [] | Improve this Doc View Source Initialize(MapDecompressionParameters) Declaration public void Initialize(MapDecompressionParameters parameters) Parameters Type Name Description MapDecompressionParameters parameters Implements IConverter<, > IConverter<, >"
  },
  "api/Texim.Compressions.Nitro.MapDecompressionParameters.html": {
    "href": "api/Texim.Compressions.Nitro.MapDecompressionParameters.html",
    "title": "Class MapDecompressionParameters | Texim extensible image API",
    "keywords": "Class MapDecompressionParameters Inheritance Object MapDecompressionParameters Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapDecompressionParameters : object Properties | Improve this Doc View Source Map Declaration public IScreenMap Map { get; set; } Property Value Type Description IScreenMap | Improve this Doc View Source TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size"
  },
  "api/Texim.Compressions.Nitro.MapInfo.html": {
    "href": "api/Texim.Compressions.Nitro.MapInfo.html",
    "title": "Struct MapInfo | Texim extensible image API",
    "keywords": "Struct MapInfo Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public struct MapInfo Constructors | Improve this Doc View Source MapInfo(Byte) Declaration public MapInfo(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source MapInfo(Int16) Declaration public MapInfo(short value) Parameters Type Name Description Int16 value Properties | Improve this Doc View Source HorizontalFlip Declaration public bool HorizontalFlip { get; } Property Value Type Description Boolean | Improve this Doc View Source PaletteIndex Declaration public byte PaletteIndex { get; } Property Value Type Description Byte | Improve this Doc View Source TileIndex Declaration public short TileIndex { get; } Property Value Type Description Int16 | Improve this Doc View Source VerticalFlip Declaration public bool VerticalFlip { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToInt16() Declaration public short ToInt16() Returns Type Description Int16"
  },
  "api/Texim.Compressions.Nitro.ScreenMap.html": {
    "href": "api/Texim.Compressions.Nitro.ScreenMap.html",
    "title": "Class ScreenMap | Texim extensible image API",
    "keywords": "Class ScreenMap Inheritance Object ScreenMap Implements IScreenMap IFormat Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class ScreenMap : object, IScreenMap, IFormat Constructors | Improve this Doc View Source ScreenMap(Int32, Int32) Declaration public ScreenMap(int width, int height) Parameters Type Name Description Int32 width Int32 height Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Maps Declaration public MapInfo[] Maps { get; } Property Value Type Description MapInfo [] | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Implements IScreenMap IFormat"
  },
  "api/Texim.Compressions.Nitro.TileExtensions.html": {
    "href": "api/Texim.Compressions.Nitro.TileExtensions.html",
    "title": "Class TileExtensions | Texim extensible image API",
    "keywords": "Class TileExtensions Inheritance Object TileExtensions Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public static class TileExtensions : object Methods | Improve this Doc View Source FlipHorizontal(Memory<IndexedPixel>, Size) Declaration public static void FlipHorizontal(this Memory<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Memory < IndexedPixel > tile Size tileSize | Improve this Doc View Source FlipHorizontal(Span<IndexedPixel>, Size) Declaration public static void FlipHorizontal(this Span<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Span < IndexedPixel > tile Size tileSize | Improve this Doc View Source FlipVertical(Memory<IndexedPixel>, Size) Declaration public static void FlipVertical(this Memory<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Memory < IndexedPixel > tile Size tileSize | Improve this Doc View Source FlipVertical(Span<IndexedPixel>, Size) Declaration public static void FlipVertical(this Span<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Span < IndexedPixel > tile Size tileSize | Improve this Doc View Source HasEquivalentIndexes(Memory<IndexedPixel>, Memory<IndexedPixel>) Declaration public static bool HasEquivalentIndexes(this Memory<IndexedPixel> tile1, Memory<IndexedPixel> tile2) Parameters Type Name Description Memory < IndexedPixel > tile1 Memory < IndexedPixel > tile2 Returns Type Description Boolean | Improve this Doc View Source HasEquivalentIndexes(Span<IndexedPixel>, Span<IndexedPixel>) Declaration public static bool HasEquivalentIndexes(this Span<IndexedPixel> tile1, Span<IndexedPixel> tile2) Parameters Type Name Description Span < IndexedPixel > tile1 Span < IndexedPixel > tile2 Returns Type Description Boolean"
  },
  "api/Texim.Formats.Bitmap2FullImage.html": {
    "href": "api/Texim.Formats.Bitmap2FullImage.html",
    "title": "Class Bitmap2FullImage | Texim extensible image API",
    "keywords": "Class Bitmap2FullImage Inheritance Object Bitmap2FullImage Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Bitmap2FullImage : IConverter<BinaryFormat, FullImage> Methods | Improve this Doc View Source Convert(BinaryFormat) Declaration public FullImage Convert(BinaryFormat source) Parameters Type Name Description BinaryFormat source Returns Type Description FullImage"
  },
  "api/Texim.Formats.FullImage2BinaryBitmap.html": {
    "href": "api/Texim.Formats.FullImage2BinaryBitmap.html",
    "title": "Class FullImage2BinaryBitmap | Texim extensible image API",
    "keywords": "Class FullImage2BinaryBitmap Inheritance Object FullImage2BinaryBitmap Implements IConverter < IFullImage , BinaryFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class FullImage2BinaryBitmap : IInitializer<ImageFormat>, IConverter<IFullImage, BinaryFormat> Methods | Improve this Doc View Source Convert(IFullImage) Declaration public BinaryFormat Convert(IFullImage source) Parameters Type Name Description IFullImage source Returns Type Description BinaryFormat | Improve this Doc View Source Initialize(ImageFormat) Declaration public void Initialize(ImageFormat parameters) Parameters Type Name Description ImageFormat parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.html": {
    "href": "api/Texim.Formats.html",
    "title": "Namespace Texim.Formats | Texim extensible image API",
    "keywords": "Namespace Texim.Formats Classes Bitmap2FullImage FullImage2BinaryBitmap IndexedImage2BinaryBitmap IndexedImageBitmapParameters Palette2BinaryBitmap Palette2BinaryRiff PaletteCollection2ContainerBitmap RawBinary2Palette RawPaletteParameters"
  },
  "api/Texim.Formats.IndexedImage2BinaryBitmap.html": {
    "href": "api/Texim.Formats.IndexedImage2BinaryBitmap.html",
    "title": "Class IndexedImage2BinaryBitmap | Texim extensible image API",
    "keywords": "Class IndexedImage2BinaryBitmap Inheritance Object IndexedImage2BinaryBitmap Implements IConverter < IIndexedImage , BinaryFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class IndexedImage2BinaryBitmap : IInitializer<IndexedImageBitmapParameters>, IConverter<IIndexedImage, BinaryFormat> Methods | Improve this Doc View Source Convert(IIndexedImage) Declaration public BinaryFormat Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description BinaryFormat | Improve this Doc View Source Initialize(IndexedImageBitmapParameters) Declaration public void Initialize(IndexedImageBitmapParameters parameters) Parameters Type Name Description IndexedImageBitmapParameters parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.IndexedImageBitmapParameters.html": {
    "href": "api/Texim.Formats.IndexedImageBitmapParameters.html",
    "title": "Class IndexedImageBitmapParameters | Texim extensible image API",
    "keywords": "Class IndexedImageBitmapParameters Inheritance Object IndexedImageBitmapParameters Namespace : Texim.Formats Assembly : Texim.dll Syntax public class IndexedImageBitmapParameters : object Properties | Improve this Doc View Source Format Declaration public ImageFormat Format { get; set; } Property Value Type Description ImageFormat | Improve this Doc View Source Palette Declaration public IPalette Palette { get; set; } Property Value Type Description IPalette | Improve this Doc View Source Palettes Declaration public IPaletteCollection Palettes { get; set; } Property Value Type Description IPaletteCollection"
  },
  "api/Texim.Formats.Palette2BinaryBitmap.html": {
    "href": "api/Texim.Formats.Palette2BinaryBitmap.html",
    "title": "Class Palette2BinaryBitmap | Texim extensible image API",
    "keywords": "Class Palette2BinaryBitmap Inheritance Object Palette2BinaryBitmap Implements IConverter < IPalette , BinaryFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Palette2BinaryBitmap : IInitializer<ImageFormat>, IConverter<IPalette, BinaryFormat> Methods | Improve this Doc View Source Convert(IPalette) Declaration public BinaryFormat Convert(IPalette source) Parameters Type Name Description IPalette source Returns Type Description BinaryFormat | Improve this Doc View Source Initialize(ImageFormat) Declaration public void Initialize(ImageFormat parameters) Parameters Type Name Description ImageFormat parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.Palette2BinaryRiff.html": {
    "href": "api/Texim.Formats.Palette2BinaryRiff.html",
    "title": "Class Palette2BinaryRiff | Texim extensible image API",
    "keywords": "Class Palette2BinaryRiff Inheritance Object Palette2BinaryRiff Implements IConverter < IPalette , BinaryFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Palette2BinaryRiff : IInitializer<bool>, IConverter<IPalette, BinaryFormat> Properties | Improve this Doc View Source GimpCompatibility Declaration public bool GimpCompatibility { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Version Declaration public static int Version { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Convert(IPalette) Declaration public BinaryFormat Convert(IPalette source) Parameters Type Name Description IPalette source Returns Type Description BinaryFormat | Improve this Doc View Source Initialize(Boolean) Declaration public void Initialize(bool parameters) Parameters Type Name Description Boolean parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.PaletteCollection2ContainerBitmap.html": {
    "href": "api/Texim.Formats.PaletteCollection2ContainerBitmap.html",
    "title": "Class PaletteCollection2ContainerBitmap | Texim extensible image API",
    "keywords": "Class PaletteCollection2ContainerBitmap Inheritance Object PaletteCollection2ContainerBitmap Implements IConverter < IPaletteCollection , NodeContainerFormat > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class PaletteCollection2ContainerBitmap : IInitializer<ImageFormat>, IConverter<IPaletteCollection, NodeContainerFormat> Methods | Improve this Doc View Source Convert(IPaletteCollection) Declaration public NodeContainerFormat Convert(IPaletteCollection source) Parameters Type Name Description IPaletteCollection source Returns Type Description NodeContainerFormat | Improve this Doc View Source Initialize(ImageFormat) Declaration public void Initialize(ImageFormat parameters) Parameters Type Name Description ImageFormat parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.RawBinary2Palette.html": {
    "href": "api/Texim.Formats.RawBinary2Palette.html",
    "title": "Class RawBinary2Palette | Texim extensible image API",
    "keywords": "Class RawBinary2Palette Inheritance Object RawBinary2Palette Implements IConverter < BinaryFormat , Palette > Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawBinary2Palette : IInitializer<RawPaletteParameters>, IConverter<BinaryFormat, Palette> Methods | Improve this Doc View Source Convert(BinaryFormat) Declaration public Palette Convert(BinaryFormat source) Parameters Type Name Description BinaryFormat source Returns Type Description Palette | Improve this Doc View Source Initialize(RawPaletteParameters) Declaration public void Initialize(RawPaletteParameters parameters) Parameters Type Name Description RawPaletteParameters parameters Implements IConverter<, >"
  },
  "api/Texim.Formats.RawPaletteParameters.html": {
    "href": "api/Texim.Formats.RawPaletteParameters.html",
    "title": "Class RawPaletteParameters | Texim extensible image API",
    "keywords": "Class RawPaletteParameters Inheritance Object RawPaletteParameters Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawPaletteParameters : object Properties | Improve this Doc View Source ColorEncoding Declaration public IColorEncoding ColorEncoding { get; set; } Property Value Type Description IColorEncoding | Improve this Doc View Source Default Declaration public static RawPaletteParameters Default { get; } Property Value Type Description RawPaletteParameters | Improve this Doc View Source Offset Declaration public long Offset { get; set; } Property Value Type Description Int64 | Improve this Doc View Source Size Declaration public int Size { get; set; } Property Value Type Description Int32"
  },
  "api/Texim.html": {
    "href": "api/Texim.html",
    "title": "Namespace Texim | Texim extensible image API",
    "keywords": "Namespace Texim Classes CollectionExtensions"
  },
  "api/Texim.Images.FullImage.html": {
    "href": "api/Texim.Images.FullImage.html",
    "title": "Class FullImage | Texim extensible image API",
    "keywords": "Class FullImage Inheritance Object FullImage Implements IFullImage IFormat Namespace : Texim.Images Assembly : Texim.dll Syntax public class FullImage : object, IFullImage, IFormat Constructors | Improve this Doc View Source FullImage(Int32, Int32) Declaration public FullImage(int width, int height) Parameters Type Name Description Int32 width Int32 height Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Pixels Declaration public Rgb[] Pixels { get; } Property Value Type Description Rgb [] | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Implements IFullImage IFormat"
  },
  "api/Texim.Images.FullImage2IndexedPalette.html": {
    "href": "api/Texim.Images.FullImage2IndexedPalette.html",
    "title": "Class FullImage2IndexedPalette | Texim extensible image API",
    "keywords": "Class FullImage2IndexedPalette Inheritance Object FullImage2IndexedPalette Implements IConverter < IFullImage , IndexedPaletteImage > Namespace : Texim.Images Assembly : Texim.dll Syntax public class FullImage2IndexedPalette : IInitializer<IQuantization>, IConverter<IFullImage, IndexedPaletteImage> Methods | Improve this Doc View Source Convert(IFullImage) Declaration public IndexedPaletteImage Convert(IFullImage source) Parameters Type Name Description IFullImage source Returns Type Description IndexedPaletteImage | Improve this Doc View Source Initialize(IQuantization) Declaration public void Initialize(IQuantization parameters) Parameters Type Name Description IQuantization parameters Implements IConverter<, >"
  },
  "api/Texim.Images.html": {
    "href": "api/Texim.Images.html",
    "title": "Namespace Texim.Images | Texim extensible image API",
    "keywords": "Namespace Texim.Images Classes FullImage FullImage2IndexedPalette Indexed2FullImage IndexedImage IndexedPaletteImage Interfaces IFullImage IIndexedImage"
  },
  "api/Texim.Images.IFullImage.html": {
    "href": "api/Texim.Images.IFullImage.html",
    "title": "Interface IFullImage | Texim extensible image API",
    "keywords": "Interface IFullImage Namespace : Texim.Images Assembly : Texim.dll Syntax public interface IFullImage : IFormat Properties | Improve this Doc View Source Height Declaration int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Pixels Declaration Rgb[] Pixels { get; } Property Value Type Description Rgb [] | Improve this Doc View Source Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Images.IIndexedImage.html": {
    "href": "api/Texim.Images.IIndexedImage.html",
    "title": "Interface IIndexedImage | Texim extensible image API",
    "keywords": "Interface IIndexedImage Namespace : Texim.Images Assembly : Texim.dll Syntax public interface IIndexedImage : IFormat Properties | Improve this Doc View Source Height Declaration int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Pixels Declaration IndexedPixel[] Pixels { get; } Property Value Type Description IndexedPixel [] | Improve this Doc View Source Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Images.Indexed2FullImage.html": {
    "href": "api/Texim.Images.Indexed2FullImage.html",
    "title": "Class Indexed2FullImage | Texim extensible image API",
    "keywords": "Class Indexed2FullImage Inheritance Object Indexed2FullImage Implements IInitializer < IPaletteCollection > IConverter < IIndexedImage , FullImage > Namespace : Texim.Images Assembly : Texim.dll Syntax public class Indexed2FullImage : IInitializer<IPalette>, IInitializer<IPaletteCollection>, IConverter<IIndexedImage, FullImage> Methods | Improve this Doc View Source Convert(IIndexedImage) Declaration public FullImage Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description FullImage | Improve this Doc View Source Initialize(IPalette) Declaration public void Initialize(IPalette parameters) Parameters Type Name Description IPalette parameters | Improve this Doc View Source Initialize(IPaletteCollection) Declaration public void Initialize(IPaletteCollection parameters) Parameters Type Name Description IPaletteCollection parameters Implements IInitializer<> IConverter<, >"
  },
  "api/Texim.Images.IndexedImage.html": {
    "href": "api/Texim.Images.IndexedImage.html",
    "title": "Class IndexedImage | Texim extensible image API",
    "keywords": "Class IndexedImage Inheritance Object IndexedImage Implements IIndexedImage IFormat Namespace : Texim.Images Assembly : Texim.dll Syntax public class IndexedImage : object, IIndexedImage, IFormat Constructors | Improve this Doc View Source IndexedImage() Declaration public IndexedImage() | Improve this Doc View Source IndexedImage(Int32, Int32) Declaration public IndexedImage(int width, int height) Parameters Type Name Description Int32 width Int32 height | Improve this Doc View Source IndexedImage(Int32, Int32, IndexedPixel[]) Declaration public IndexedImage(int width, int height, IndexedPixel[] pixels) Parameters Type Name Description Int32 width Int32 height IndexedPixel [] pixels Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Pixels Declaration public IndexedPixel[] Pixels { get; } Property Value Type Description IndexedPixel [] | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateFullImage(IPalette) Declaration public FullImage CreateFullImage(IPalette palette) Parameters Type Name Description IPalette palette Returns Type Description FullImage | Improve this Doc View Source CreateFullImage(IPaletteCollection) Declaration public FullImage CreateFullImage(IPaletteCollection palettes) Parameters Type Name Description IPaletteCollection palettes Returns Type Description FullImage Implements IIndexedImage IFormat"
  },
  "api/Texim.Images.IndexedPaletteImage.html": {
    "href": "api/Texim.Images.IndexedPaletteImage.html",
    "title": "Class IndexedPaletteImage | Texim extensible image API",
    "keywords": "Class IndexedPaletteImage Inheritance Object IndexedPaletteImage Implements IIndexedImage IPaletteCollection IFormat Namespace : Texim.Images Assembly : Texim.dll Syntax public class IndexedPaletteImage : object, IIndexedImage, IPaletteCollection, IFormat Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Palettes Declaration public Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette > | Improve this Doc View Source Pixels Declaration public IndexedPixel[] Pixels { get; } Property Value Type Description IndexedPixel [] | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateFullImage() Declaration public FullImage CreateFullImage() Returns Type Description FullImage Implements IIndexedImage IPaletteCollection IFormat"
  },
  "api/Texim.Palettes.html": {
    "href": "api/Texim.Palettes.html",
    "title": "Namespace Texim.Palettes | Texim extensible image API",
    "keywords": "Namespace Texim.Palettes Classes Palette PaletteCollection Interfaces IPalette IPaletteCollection"
  },
  "api/Texim.Palettes.IPalette.html": {
    "href": "api/Texim.Palettes.IPalette.html",
    "title": "Interface IPalette | Texim extensible image API",
    "keywords": "Interface IPalette Namespace : Texim.Palettes Assembly : Texim.dll Syntax public interface IPalette : IFormat Properties | Improve this Doc View Source Colors Declaration Collection<Rgb> Colors { get; } Property Value Type Description Collection < Rgb >"
  },
  "api/Texim.Palettes.IPaletteCollection.html": {
    "href": "api/Texim.Palettes.IPaletteCollection.html",
    "title": "Interface IPaletteCollection | Texim extensible image API",
    "keywords": "Interface IPaletteCollection Namespace : Texim.Palettes Assembly : Texim.dll Syntax public interface IPaletteCollection : IFormat Properties | Improve this Doc View Source Palettes Declaration Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette >"
  },
  "api/Texim.Palettes.Palette.html": {
    "href": "api/Texim.Palettes.Palette.html",
    "title": "Class Palette | Texim extensible image API",
    "keywords": "Class Palette Inheritance Object Palette Implements IPalette IFormat Namespace : Texim.Palettes Assembly : Texim.dll Syntax public class Palette : object, IPalette, IFormat Constructors | Improve this Doc View Source Palette() Declaration public Palette() | Improve this Doc View Source Palette(IEnumerable<Rgb>) Declaration public Palette(IEnumerable<Rgb> initialColors) Parameters Type Name Description IEnumerable < Rgb > initialColors Properties | Improve this Doc View Source Colors Declaration public Collection<Rgb> Colors { get; } Property Value Type Description Collection < Rgb > Implements IPalette IFormat"
  },
  "api/Texim.Palettes.PaletteCollection.html": {
    "href": "api/Texim.Palettes.PaletteCollection.html",
    "title": "Class PaletteCollection | Texim extensible image API",
    "keywords": "Class PaletteCollection Inheritance Object PaletteCollection Implements IPaletteCollection IFormat Namespace : Texim.Palettes Assembly : Texim.dll Syntax public class PaletteCollection : object, IPaletteCollection, IFormat Constructors | Improve this Doc View Source PaletteCollection() Declaration public PaletteCollection() | Improve this Doc View Source PaletteCollection(IEnumerable<IPalette>) Declaration public PaletteCollection(IEnumerable<IPalette> initialPalettes) Parameters Type Name Description IEnumerable < IPalette > initialPalettes | Improve this Doc View Source PaletteCollection(IPalette) Declaration public PaletteCollection(IPalette initialPalette) Parameters Type Name Description IPalette initialPalette Properties | Improve this Doc View Source Palettes Declaration public Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette > Implements IPaletteCollection IFormat"
  },
  "api/Texim.Pixels.BytePixelEncoding.html": {
    "href": "api/Texim.Pixels.BytePixelEncoding.html",
    "title": "Class BytePixelEncoding | Texim extensible image API",
    "keywords": "Class BytePixelEncoding Inheritance Object BytePixelEncoding Indexed4Bpp Indexed8Bpp IndexedA3I5 IndexedA5I3 Implements IIndexedPixelEncoding Namespace : Texim.Pixels Assembly : Texim.dll Syntax public abstract class BytePixelEncoding : object, IIndexedPixelEncoding Properties | Improve this Doc View Source BitsPerPixel Declaration public abstract int BitsPerPixel { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source BitsToPixel(Byte) Declaration protected abstract IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel | Improve this Doc View Source Decode(Span<Byte>) Declaration public IndexedPixel[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description IndexedPixel [] | Improve this Doc View Source Decode(Stream, Int32) Declaration public IndexedPixel[] Decode(Stream stream, int numPixels) Parameters Type Name Description Stream stream Int32 numPixels Returns Type Description IndexedPixel [] | Improve this Doc View Source Encode(IEnumerable<IndexedPixel>) Declaration public byte[] Encode(IEnumerable<IndexedPixel> pixels) Parameters Type Name Description IEnumerable < IndexedPixel > pixels Returns Type Description Byte [] | Improve this Doc View Source PixelToBits(IndexedPixel) Declaration protected abstract byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.html": {
    "href": "api/Texim.Pixels.html",
    "title": "Namespace Texim.Pixels | Texim extensible image API",
    "keywords": "Namespace Texim.Pixels Classes BytePixelEncoding Indexed4Bpp Indexed8Bpp IndexedA3I5 IndexedA5I3 IOExtensions TileSwizzling<T> Structs IndexedPixel Interfaces IIndexedPixelEncoding ISwizzling<T>"
  },
  "api/Texim.Pixels.IIndexedPixelEncoding.html": {
    "href": "api/Texim.Pixels.IIndexedPixelEncoding.html",
    "title": "Interface IIndexedPixelEncoding | Texim extensible image API",
    "keywords": "Interface IIndexedPixelEncoding Namespace : Texim.Pixels Assembly : Texim.dll Syntax public interface IIndexedPixelEncoding Methods | Improve this Doc View Source Decode(Span<Byte>) Declaration IndexedPixel[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description IndexedPixel [] | Improve this Doc View Source Decode(Stream, Int32) Declaration IndexedPixel[] Decode(Stream stream, int numPixels) Parameters Type Name Description Stream stream Int32 numPixels Returns Type Description IndexedPixel [] | Improve this Doc View Source Encode(IEnumerable<IndexedPixel>) Declaration byte[] Encode(IEnumerable<IndexedPixel> pixels) Parameters Type Name Description IEnumerable < IndexedPixel > pixels Returns Type Description Byte []"
  },
  "api/Texim.Pixels.Indexed4Bpp.html": {
    "href": "api/Texim.Pixels.Indexed4Bpp.html",
    "title": "Class Indexed4Bpp | Texim extensible image API",
    "keywords": "Class Indexed4Bpp Inheritance Object BytePixelEncoding Indexed4Bpp Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class Indexed4Bpp : BytePixelEncoding, IIndexedPixelEncoding Properties | Improve this Doc View Source BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel | Improve this Doc View Source Instance Declaration public static Indexed4Bpp Instance { get; } Property Value Type Description Indexed4Bpp Methods | Improve this Doc View Source BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) | Improve this Doc View Source PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.Indexed8Bpp.html": {
    "href": "api/Texim.Pixels.Indexed8Bpp.html",
    "title": "Class Indexed8Bpp | Texim extensible image API",
    "keywords": "Class Indexed8Bpp Inheritance Object BytePixelEncoding Indexed8Bpp Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class Indexed8Bpp : BytePixelEncoding, IIndexedPixelEncoding Properties | Improve this Doc View Source BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel | Improve this Doc View Source Instance Declaration public static Indexed8Bpp Instance { get; } Property Value Type Description Indexed8Bpp Methods | Improve this Doc View Source BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) | Improve this Doc View Source PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.IndexedA3I5.html": {
    "href": "api/Texim.Pixels.IndexedA3I5.html",
    "title": "Class IndexedA3I5 | Texim extensible image API",
    "keywords": "Class IndexedA3I5 Inheritance Object BytePixelEncoding IndexedA3I5 Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class IndexedA3I5 : BytePixelEncoding, IIndexedPixelEncoding Properties | Improve this Doc View Source BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel | Improve this Doc View Source Instance Declaration public static IndexedA3I5 Instance { get; } Property Value Type Description IndexedA3I5 Methods | Improve this Doc View Source BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) | Improve this Doc View Source PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.IndexedA5I3.html": {
    "href": "api/Texim.Pixels.IndexedA5I3.html",
    "title": "Class IndexedA5I3 | Texim extensible image API",
    "keywords": "Class IndexedA5I3 Inheritance Object BytePixelEncoding IndexedA5I3 Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class IndexedA5I3 : BytePixelEncoding, IIndexedPixelEncoding Properties | Improve this Doc View Source BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel | Improve this Doc View Source Instance Declaration public static IndexedA5I3 Instance { get; } Property Value Type Description IndexedA5I3 Methods | Improve this Doc View Source BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) | Improve this Doc View Source PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.IndexedPixel.html": {
    "href": "api/Texim.Pixels.IndexedPixel.html",
    "title": "Struct IndexedPixel | Texim extensible image API",
    "keywords": "Struct IndexedPixel Namespace : Texim.Pixels Assembly : Texim.dll Syntax public struct IndexedPixel Constructors | Improve this Doc View Source IndexedPixel(Int16) Declaration public IndexedPixel(short index) Parameters Type Name Description Int16 index | Improve this Doc View Source IndexedPixel(Int16, Byte) Declaration public IndexedPixel(short index, byte alpha) Parameters Type Name Description Int16 index Byte alpha | Improve this Doc View Source IndexedPixel(Int16, Byte, Byte) Declaration public IndexedPixel(short index, byte alpha, byte paletteIndex) Parameters Type Name Description Int16 index Byte alpha Byte paletteIndex Properties | Improve this Doc View Source Alpha Declaration public byte Alpha { get; } Property Value Type Description Byte | Improve this Doc View Source Index Declaration public short Index { get; } Property Value Type Description Int16 | Improve this Doc View Source PaletteIndex Declaration public byte PaletteIndex { get; } Property Value Type Description Byte"
  },
  "api/Texim.Pixels.IOExtensions.html": {
    "href": "api/Texim.Pixels.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Pixels Assembly : Texim.dll Syntax public static class IOExtensions : object Methods | Improve this Doc View Source DecodePixelsAs<T>(Byte[]) Declaration public static IndexedPixel[] DecodePixelsAs<T>(this byte[] data) where T : IIndexedPixelEncoding, new() Parameters Type Name Description Byte [] data Returns Type Description IndexedPixel [] Type Parameters Name Description T | Improve this Doc View Source EncodePixelsAs<T>(IndexedPixel[]) Declaration public static byte[] EncodePixelsAs<T>(this IndexedPixel[] pixels) where T : IIndexedPixelEncoding, new() Parameters Type Name Description IndexedPixel [] pixels Returns Type Description Byte [] Type Parameters Name Description T | Improve this Doc View Source ReadPixels<T>(DataReader, Int32) Declaration public static IndexedPixel[] ReadPixels<T>(this DataReader reader, int numPixels) where T : IIndexedPixelEncoding, new() Parameters Type Name Description DataReader reader Int32 numPixels Returns Type Description IndexedPixel [] Type Parameters Name Description T | Improve this Doc View Source UnswizzleWith(IndexedPixel[], ISwizzling<IndexedPixel>) Declaration public static IndexedPixel[] UnswizzleWith(this IndexedPixel[] pixels, ISwizzling<IndexedPixel> swizzling) Parameters Type Name Description IndexedPixel [] pixels ISwizzling < IndexedPixel > swizzling Returns Type Description IndexedPixel [] | Improve this Doc View Source Write<T>(DataWriter, IEnumerable<IndexedPixel>) Declaration public static void Write<T>(this DataWriter writer, IEnumerable<IndexedPixel> pixels) where T : IIndexedPixelEncoding, new() Parameters Type Name Description DataWriter writer IEnumerable < IndexedPixel > pixels Type Parameters Name Description T"
  },
  "api/Texim.Pixels.ISwizzling-1.html": {
    "href": "api/Texim.Pixels.ISwizzling-1.html",
    "title": "Interface ISwizzling<T> | Texim extensible image API",
    "keywords": "Interface ISwizzling<T> Namespace : Texim.Pixels Assembly : Texim.dll Syntax public interface ISwizzling<T> Type Parameters Name Description T Methods | Improve this Doc View Source Swizzle(IEnumerable<T>) Declaration T[] Swizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[] | Improve this Doc View Source Unswizzle(IEnumerable<T>) Declaration T[] Unswizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[]"
  },
  "api/Texim.Pixels.TileSwizzling-1.html": {
    "href": "api/Texim.Pixels.TileSwizzling-1.html",
    "title": "Class TileSwizzling<T> | Texim extensible image API",
    "keywords": "Class TileSwizzling<T> Inheritance Object TileSwizzling<T> Implements ISwizzling <T> Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class TileSwizzling<T> : object, ISwizzling<T> Type Parameters Name Description T Constructors | Improve this Doc View Source TileSwizzling() Declaration public TileSwizzling() | Improve this Doc View Source TileSwizzling(Size, Int32) Declaration public TileSwizzling(Size tileSize, int width) Parameters Type Name Description Size tileSize Int32 width | Improve this Doc View Source TileSwizzling(Int32) Declaration public TileSwizzling(int width) Parameters Type Name Description Int32 width Properties | Improve this Doc View Source TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size | Improve this Doc View Source Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Swizzle(IEnumerable<T>) Declaration public T[] Swizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[] | Improve this Doc View Source Unswizzle(IEnumerable<T>) Declaration public T[] Unswizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[] Implements ISwizzling<T>"
  },
  "api/Texim.Processing.ExhaustiveColorSearch.html": {
    "href": "api/Texim.Processing.ExhaustiveColorSearch.html",
    "title": "Class ExhaustiveColorSearch | Texim extensible image API",
    "keywords": "Class ExhaustiveColorSearch Inheritance Object ExhaustiveColorSearch Namespace : Texim.Processing Assembly : Texim.dll Syntax public class ExhaustiveColorSearch : object Constructors | Improve this Doc View Source ExhaustiveColorSearch(IEnumerable<Rgb>) Declaration public ExhaustiveColorSearch(IEnumerable<Rgb> vertex) Parameters Type Name Description IEnumerable < Rgb > vertex Methods | Improve this Doc View Source Search(Rgb) Declaration public int Search(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Int32"
  },
  "api/Texim.Processing.FixedPaletteQuantization.html": {
    "href": "api/Texim.Processing.FixedPaletteQuantization.html",
    "title": "Class FixedPaletteQuantization | Texim extensible image API",
    "keywords": "Class FixedPaletteQuantization Inheritance Object FixedPaletteQuantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class FixedPaletteQuantization : object, IQuantization Constructors | Improve this Doc View Source FixedPaletteQuantization(IPalette) Declaration public FixedPaletteQuantization(IPalette palette) Parameters Type Name Description IPalette palette Properties | Improve this Doc View Source FirstAsTransparent Declaration public bool FirstAsTransparent { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description ValueTuple < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "api/Texim.Processing.html": {
    "href": "api/Texim.Processing.html",
    "title": "Namespace Texim.Processing | Texim extensible image API",
    "keywords": "Namespace Texim.Processing Classes ExhaustiveColorSearch FixedPaletteQuantization MedianCutQuantization Quantization Interfaces IQuantization"
  },
  "api/Texim.Processing.IQuantization.html": {
    "href": "api/Texim.Processing.IQuantization.html",
    "title": "Interface IQuantization | Texim extensible image API",
    "keywords": "Interface IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public interface IQuantization Methods | Improve this Doc View Source Quantize(Rgb[]) Declaration (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description ValueTuple < IndexedPixel [], IPaletteCollection >"
  },
  "api/Texim.Processing.MedianCutQuantization.html": {
    "href": "api/Texim.Processing.MedianCutQuantization.html",
    "title": "Class MedianCutQuantization | Texim extensible image API",
    "keywords": "Class MedianCutQuantization Inheritance Object MedianCutQuantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class MedianCutQuantization : object, IQuantization Constructors | Improve this Doc View Source MedianCutQuantization(Int32) Declaration public MedianCutQuantization(int maxColors) Parameters Type Name Description Int32 maxColors Properties | Improve this Doc View Source MaxColors Declaration public int MaxColors { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description ValueTuple < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "api/Texim.Processing.Quantization.html": {
    "href": "api/Texim.Processing.Quantization.html",
    "title": "Class Quantization | Texim extensible image API",
    "keywords": "Class Quantization Inheritance Object Quantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class Quantization : object, IQuantization Properties | Improve this Doc View Source AlphaColor Declaration public Rgb AlphaColor { get; set; } Property Value Type Description Rgb | Improve this Doc View Source FirstAsTransparent Declaration public bool FirstAsTransparent { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description ValueTuple < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the project | Texim extensible image API",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (April 09, 2021) | Texim extensible image API",
    "keywords": "vNext (April 09, 2021) As part of this release we had 12 issues closed. Breaking #8 Remove old API Bug #9 Fix warnings and issues Enhancements #12 Implement Nitro tile compression via map/screen data #11 Implement color quantization API, algorithms and importers #10 Implement NCGR format #7 Re-implementation of image API #6 Implement NCLR palette format #5 Implement NCCL format from Layton games #4 Re-implementation of color and palette API #3 Upgrade Yarhl #2 Performance test for different types of Pixel structures #1 Implement workflow and C# template repo"
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to the project | Texim extensible image API",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "index.html": {
    "href": "index.html",
    "title": "Texim | Texim extensible image API",
    "keywords": "Texim Extensible API for image-related formats. It aims to provide an API to easily implement different image, palette, sprites and animation formats. Including typical image processing algorithms for importers or hardware swizzlers of different platforms. This is a proof-of-concept project for fast prototyping. In the future it will be Yarhl.Media.Images . There aren't stable releases, only preview. The API may suffer major refactors between minor versions. <!-- prettier-ignore --> Release Package Stable None Preview Azure Artifacts Documentation Feel free to ask any question in the project Discussion site! Check our on-line documentation . Build The project requires to build .NET 5 SDK and .NET Core 3.1 runtime (Linux and MacOS require also Mono). If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  },
  "README.html": {
    "href": "README.html",
    "title": "Texim | Texim extensible image API",
    "keywords": "Texim Extensible API for image-related formats. It aims to provide an API to easily implement different image, palette, sprites and animation formats. Including typical image processing algorithms for importers or hardware swizzlers of different platforms. This is a proof-of-concept project for fast prototyping. In the future it will be Yarhl.Media.Images . There aren't stable releases, only preview. The API may suffer major refactors between minor versions. <!-- prettier-ignore --> Release Package Stable None Preview Azure Artifacts Documentation Feel free to ask any question in the project Discussion site! Check our on-line documentation . Build The project requires to build .NET 5 SDK and .NET Core 3.1 runtime (Linux and MacOS require also Mono). If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  }
}