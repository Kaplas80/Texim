{
  "api/Texim.CollectionExtensions.html": {
    "href": "api/Texim.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Texim extensible image API",
    "keywords": "Class CollectionExtensions Inheritance Object CollectionExtensions Namespace : Texim Assembly : Texim.dll Syntax public static class CollectionExtensions : Object Methods Add<T>(Collection<T>, IEnumerable<T>) Declaration public static void Add<T>(this Collection<T> collection, IEnumerable<T> source) Parameters Type Name Description Collection <T> collection IEnumerable <T> source Type Parameters Name Description T"
  },
  "api/Texim.Colors.Bgr555.html": {
    "href": "api/Texim.Colors.Bgr555.html",
    "title": "Class Bgr555 | Texim extensible image API",
    "keywords": "Class Bgr555 Inheritance Object Bgr555 Implements IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Bgr555 : Object, IColorEncoding Constructors Bgr555() Declaration public Bgr555() Properties BytesPerColor Declaration public static int BytesPerColor { get; } Property Value Type Description Int32 Instance Declaration public static Bgr555 Instance { get; } Property Value Type Description Bgr555 Methods Decode(Stream) Declaration public Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb Decode(Stream, Int32) Declaration public Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] Decode(Span<Byte>) Declaration public Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] Encode(IEnumerable<Rgb>) Declaration public byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] Encode(Rgb) Declaration public byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte [] FromUInt16(UInt16) Declaration public static Rgb FromUInt16(ushort value) Parameters Type Name Description UInt16 value Returns Type Description Rgb ToUInt16(Rgb) Declaration public static ushort ToUInt16(Rgb color) Parameters Type Name Description Rgb color Returns Type Description UInt16 Implements IColorEncoding"
  },
  "api/Texim.Colors.html": {
    "href": "api/Texim.Colors.html",
    "title": "Namespace Texim.Colors | Texim extensible image API",
    "keywords": "Namespace Texim.Colors Classes Bgr555 IOExtensions Rgb Rgb32 Rgba32 Interfaces IColorEncoding"
  },
  "api/Texim.Colors.IColorEncoding.html": {
    "href": "api/Texim.Colors.IColorEncoding.html",
    "title": "Interface IColorEncoding | Texim extensible image API",
    "keywords": "Interface IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public interface IColorEncoding Methods Decode(Stream) Declaration Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb Decode(Stream, Int32) Declaration Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] Decode(Span<Byte>) Declaration Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] Encode(IEnumerable<Rgb>) Declaration byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] Encode(Rgb) Declaration byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte []"
  },
  "api/Texim.Colors.IOExtensions.html": {
    "href": "api/Texim.Colors.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Colors Assembly : Texim.dll Syntax public static class IOExtensions : Object Methods DecodeColorsAs<T>(Byte[]) Declaration public static Rgb[] DecodeColorsAs<T>(this byte[] data) where T : IColorEncoding, new() Parameters Type Name Description Byte [] data Returns Type Description Rgb [] Type Parameters Name Description T ReadColor<T>(DataReader) Declaration public static Rgb ReadColor<T>(this DataReader reader) where T : IColorEncoding, new() Parameters Type Name Description Yarhl.IO.DataReader reader Returns Type Description Rgb Type Parameters Name Description T ReadColors<T>(DataReader, Int32) Declaration public static Rgb[] ReadColors<T>(this DataReader reader, int numColors) where T : IColorEncoding, new() Parameters Type Name Description Yarhl.IO.DataReader reader Int32 numColors Returns Type Description Rgb [] Type Parameters Name Description T Write<T>(DataWriter, IEnumerable<Rgb>) Declaration public static void Write<T>(this DataWriter writer, IEnumerable<Rgb> colors) where T : IColorEncoding, new() Parameters Type Name Description Yarhl.IO.DataWriter writer IEnumerable < Rgb > colors Type Parameters Name Description T Write<T>(DataWriter, Rgb) Declaration public static void Write<T>(this DataWriter writer, Rgb color) where T : IColorEncoding, new() Parameters Type Name Description Yarhl.IO.DataWriter writer Rgb color Type Parameters Name Description T"
  },
  "api/Texim.Colors.Rgb.html": {
    "href": "api/Texim.Colors.Rgb.html",
    "title": "Class Rgb | Texim extensible image API",
    "keywords": "Class Rgb Inheritance Object Rgb Namespace : Texim.Colors Assembly : Texim.dll Syntax public sealed class Rgb : ValueType Constructors Rgb(Rgba32) Declaration public Rgb(Rgba32 color) Parameters Type Name Description SixLabors.ImageSharp.PixelFormats.Rgba32 color Rgb(Byte, Byte, Byte) Declaration public Rgb(byte red, byte green, byte blue) Parameters Type Name Description Byte red Byte green Byte blue Rgb(Byte, Byte, Byte, Byte) Declaration public Rgb(byte red, byte green, byte blue, byte alpha) Parameters Type Name Description Byte red Byte green Byte blue Byte alpha Rgb(Color) Declaration public Rgb(Color color) Parameters Type Name Description Color color Rgb(Rgb, Byte) Declaration public Rgb(Rgb color, byte alpha) Parameters Type Name Description Rgb color Byte alpha Properties Alpha Declaration public byte Alpha { get; set; } Property Value Type Description Byte Blue Declaration public byte Blue { get; set; } Property Value Type Description Byte Green Declaration public byte Green { get; set; } Property Value Type Description Byte Red Declaration public byte Red { get; set; } Property Value Type Description Byte Methods GetDistanceSquared(Rgb) Declaration public int GetDistanceSquared(Rgb other) Parameters Type Name Description Rgb other Returns Type Description Int32 ToColor() Declaration public Color ToColor() Returns Type Description Color ToImageSharpColor() Declaration public Rgba32 ToImageSharpColor() Returns Type Description SixLabors.ImageSharp.PixelFormats.Rgba32"
  },
  "api/Texim.Colors.Rgb32.html": {
    "href": "api/Texim.Colors.Rgb32.html",
    "title": "Class Rgb32 | Texim extensible image API",
    "keywords": "Class Rgb32 Inheritance Object Rgba32 Rgb32 Implements IColorEncoding Inherited Members Rgba32.Decode(Stream) Rgba32.Decode(Stream, Int32) Rgba32.Decode(Span<Byte>) Rgba32.Encode(Rgb) Rgba32.Encode(IEnumerable<Rgb>) Rgba32.BytesPerColor Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Rgb32 : Rgba32, IColorEncoding Constructors Rgb32() Declaration public Rgb32() Properties Instance Declaration public static Rgb32 Instance { get; } Property Value Type Description Rgb32 Implements IColorEncoding"
  },
  "api/Texim.Colors.Rgba32.html": {
    "href": "api/Texim.Colors.Rgba32.html",
    "title": "Class Rgba32 | Texim extensible image API",
    "keywords": "Class Rgba32 Inheritance Object Rgba32 Rgb32 Implements IColorEncoding Namespace : Texim.Colors Assembly : Texim.dll Syntax public class Rgba32 : Object, IColorEncoding Constructors Rgba32() Declaration public Rgba32() Properties BytesPerColor Declaration public static int BytesPerColor { get; } Property Value Type Description Int32 Instance Declaration public static Rgba32 Instance { get; } Property Value Type Description Rgba32 Methods Decode(Stream) Declaration public Rgb Decode(Stream stream) Parameters Type Name Description Stream stream Returns Type Description Rgb Decode(Stream, Int32) Declaration public Rgb[] Decode(Stream stream, int numColors) Parameters Type Name Description Stream stream Int32 numColors Returns Type Description Rgb [] Decode(Span<Byte>) Declaration public Rgb[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description Rgb [] Encode(IEnumerable<Rgb>) Declaration public byte[] Encode(IEnumerable<Rgb> colors) Parameters Type Name Description IEnumerable < Rgb > colors Returns Type Description Byte [] Encode(Rgb) Declaration public byte[] Encode(Rgb color) Parameters Type Name Description Rgb color Returns Type Description Byte [] Implements IColorEncoding"
  },
  "api/Texim.Compressions.Nitro.FullImageMapCompression.html": {
    "href": "api/Texim.Compressions.Nitro.FullImageMapCompression.html",
    "title": "Class FullImageMapCompression | Texim extensible image API",
    "keywords": "Class FullImageMapCompression Inheritance Object FullImageMapCompression Implements Yarhl.FileFormat.IInitializer < FullImageMapCompressionParams > Yarhl.FileFormat.IConverter < IFullImage , Yarhl.FileSystem.NodeContainerFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class FullImageMapCompression : Object Constructors FullImageMapCompression() Declaration public FullImageMapCompression() Methods Convert(IFullImage) Declaration public NodeContainerFormat Convert(IFullImage source) Parameters Type Name Description IFullImage source Returns Type Description Yarhl.FileSystem.NodeContainerFormat Initialize(FullImageMapCompressionParams) Declaration public void Initialize(FullImageMapCompressionParams parameters) Parameters Type Name Description FullImageMapCompressionParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Compressions.Nitro.FullImageMapCompressionParams.html": {
    "href": "api/Texim.Compressions.Nitro.FullImageMapCompressionParams.html",
    "title": "Class FullImageMapCompressionParams | Texim extensible image API",
    "keywords": "Class FullImageMapCompressionParams Inheritance Object MapCompressionParams FullImageMapCompressionParams Inherited Members MapCompressionParams.TileSize MapCompressionParams.MergeImage Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class FullImageMapCompressionParams : MapCompressionParams Constructors FullImageMapCompressionParams() Declaration public FullImageMapCompressionParams() Properties Palettes Declaration public IPaletteCollection Palettes { get; set; } Property Value Type Description IPaletteCollection"
  },
  "api/Texim.Compressions.Nitro.html": {
    "href": "api/Texim.Compressions.Nitro.html",
    "title": "Namespace Texim.Compressions.Nitro | Texim extensible image API",
    "keywords": "Namespace Texim.Compressions.Nitro Classes FullImageMapCompression FullImageMapCompressionParams IOExtensions MapCompression MapCompressionParams MapDecompression MapDecompressionParams MapInfo RawBinary2ScreenMap RawScreenMapParams ScreenMap Interfaces IScreenMap"
  },
  "api/Texim.Compressions.Nitro.IOExtensions.html": {
    "href": "api/Texim.Compressions.Nitro.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public static class IOExtensions : Object Methods ReadMapInfo(DataReader) Declaration public static MapInfo ReadMapInfo(this DataReader reader) Parameters Type Name Description Yarhl.IO.DataReader reader Returns Type Description MapInfo ReadMapInfos(DataReader, Int32) Declaration public static MapInfo[] ReadMapInfos(this DataReader reader, int numMaps) Parameters Type Name Description Yarhl.IO.DataReader reader Int32 numMaps Returns Type Description MapInfo [] Write(DataWriter, IEnumerable<MapInfo>) Declaration public static void Write(this DataWriter writer, IEnumerable<MapInfo> infos) Parameters Type Name Description Yarhl.IO.DataWriter writer IEnumerable < MapInfo > infos Write(DataWriter, MapInfo) Declaration public static void Write(this DataWriter writer, MapInfo info) Parameters Type Name Description Yarhl.IO.DataWriter writer MapInfo info"
  },
  "api/Texim.Compressions.Nitro.IScreenMap.html": {
    "href": "api/Texim.Compressions.Nitro.IScreenMap.html",
    "title": "Interface IScreenMap | Texim extensible image API",
    "keywords": "Interface IScreenMap Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public interface IScreenMap Properties Height Declaration int Height { get; } Property Value Type Description Int32 Maps Declaration MapInfo[] Maps { get; } Property Value Type Description MapInfo [] Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Compressions.Nitro.MapCompression.html": {
    "href": "api/Texim.Compressions.Nitro.MapCompression.html",
    "title": "Class MapCompression | Texim extensible image API",
    "keywords": "Class MapCompression Inheritance Object MapCompression Implements Yarhl.FileFormat.IInitializer < MapCompressionParams > Yarhl.FileFormat.IConverter < IIndexedImage , Yarhl.FileSystem.NodeContainerFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapCompression : Object Constructors MapCompression() Declaration public MapCompression() Methods Convert(IIndexedImage) Declaration public NodeContainerFormat Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description Yarhl.FileSystem.NodeContainerFormat Initialize(MapCompressionParams) Declaration public void Initialize(MapCompressionParams parameters) Parameters Type Name Description MapCompressionParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Compressions.Nitro.MapCompressionParams.html": {
    "href": "api/Texim.Compressions.Nitro.MapCompressionParams.html",
    "title": "Class MapCompressionParams | Texim extensible image API",
    "keywords": "Class MapCompressionParams Inheritance Object MapCompressionParams FullImageMapCompressionParams Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapCompressionParams : Object Constructors MapCompressionParams() Declaration public MapCompressionParams() Properties MergeImage Declaration public IIndexedImage MergeImage { get; set; } Property Value Type Description IIndexedImage TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size"
  },
  "api/Texim.Compressions.Nitro.MapDecompression.html": {
    "href": "api/Texim.Compressions.Nitro.MapDecompression.html",
    "title": "Class MapDecompression | Texim extensible image API",
    "keywords": "Class MapDecompression Inheritance Object MapDecompression Implements Yarhl.FileFormat.IInitializer < MapDecompressionParams > Yarhl.FileFormat.IConverter < IIndexedImage , IndexedImage > Yarhl.FileFormat.IConverter Yarhl.FileFormat.IConverter < IndexedPixel [], IndexedPixel []> Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapDecompression : Object Constructors MapDecompression() Declaration public MapDecompression() Methods Convert(IIndexedImage) Declaration public IndexedImage Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description IndexedImage Convert(IndexedPixel[]) Declaration public IndexedPixel[] Convert(IndexedPixel[] source) Parameters Type Name Description IndexedPixel [] source Returns Type Description IndexedPixel [] Initialize(MapDecompressionParams) Declaration public void Initialize(MapDecompressionParams parameters) Parameters Type Name Description MapDecompressionParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter Yarhl.FileFormat.IConverter<, >"
  },
  "api/Texim.Compressions.Nitro.MapDecompressionParams.html": {
    "href": "api/Texim.Compressions.Nitro.MapDecompressionParams.html",
    "title": "Class MapDecompressionParams | Texim extensible image API",
    "keywords": "Class MapDecompressionParams Inheritance Object MapDecompressionParams Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class MapDecompressionParams : Object Constructors MapDecompressionParams() Declaration public MapDecompressionParams() Properties Map Declaration public IScreenMap Map { get; set; } Property Value Type Description IScreenMap OutOfBoundsTileIndex Declaration public int OutOfBoundsTileIndex { get; set; } Property Value Type Description Int32 TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size"
  },
  "api/Texim.Compressions.Nitro.MapInfo.html": {
    "href": "api/Texim.Compressions.Nitro.MapInfo.html",
    "title": "Class MapInfo | Texim extensible image API",
    "keywords": "Class MapInfo Inheritance Object MapInfo Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public sealed class MapInfo : ValueType Constructors MapInfo(Byte) Declaration public MapInfo(byte value) Parameters Type Name Description Byte value MapInfo(Int16) Declaration public MapInfo(short value) Parameters Type Name Description Int16 value MapInfo(UInt16) Declaration public MapInfo(ushort value) Parameters Type Name Description UInt16 value Properties HorizontalFlip Declaration public bool HorizontalFlip { get; set; } Property Value Type Description Boolean PaletteIndex Declaration public byte PaletteIndex { get; set; } Property Value Type Description Byte TileIndex Declaration public short TileIndex { get; set; } Property Value Type Description Int16 VerticalFlip Declaration public bool VerticalFlip { get; set; } Property Value Type Description Boolean Methods ToInt16() Declaration public short ToInt16() Returns Type Description Int16"
  },
  "api/Texim.Compressions.Nitro.RawBinary2ScreenMap.html": {
    "href": "api/Texim.Compressions.Nitro.RawBinary2ScreenMap.html",
    "title": "Class RawBinary2ScreenMap | Texim extensible image API",
    "keywords": "Class RawBinary2ScreenMap Inheritance Object RawBinary2ScreenMap Implements Yarhl.FileFormat.IInitializer < RawScreenMapParams > Yarhl.FileFormat.IConverter < Yarhl.IO.IBinary , ScreenMap > Yarhl.FileFormat.IConverter Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class RawBinary2ScreenMap : Object Constructors RawBinary2ScreenMap() Declaration public RawBinary2ScreenMap() Methods Convert(IBinary) Declaration public ScreenMap Convert(IBinary source) Parameters Type Name Description Yarhl.IO.IBinary source Returns Type Description ScreenMap Initialize(RawScreenMapParams) Declaration public void Initialize(RawScreenMapParams parameters) Parameters Type Name Description RawScreenMapParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Compressions.Nitro.RawScreenMapParams.html": {
    "href": "api/Texim.Compressions.Nitro.RawScreenMapParams.html",
    "title": "Class RawScreenMapParams | Texim extensible image API",
    "keywords": "Class RawScreenMapParams Inheritance Object RawScreenMapParams Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class RawScreenMapParams : Object Constructors RawScreenMapParams() Declaration public RawScreenMapParams() Properties Default Declaration public static RawScreenMapParams Default { get; } Property Value Type Description RawScreenMapParams Height Declaration public int Height { get; set; } Property Value Type Description Int32 Offset Declaration public long Offset { get; set; } Property Value Type Description Int64 Size Declaration public int Size { get; set; } Property Value Type Description Int32 Width Declaration public int Width { get; set; } Property Value Type Description Int32"
  },
  "api/Texim.Compressions.Nitro.ScreenMap.html": {
    "href": "api/Texim.Compressions.Nitro.ScreenMap.html",
    "title": "Class ScreenMap | Texim extensible image API",
    "keywords": "Class ScreenMap Inheritance Object ScreenMap Implements IScreenMap Yarhl.FileFormat.IFormat Namespace : Texim.Compressions.Nitro Assembly : Texim.dll Syntax public class ScreenMap : Object, IScreenMap Constructors ScreenMap() Declaration public ScreenMap() ScreenMap(Int32, Int32) Declaration public ScreenMap(int width, int height) Parameters Type Name Description Int32 width Int32 height Properties Height Declaration public int Height { get; set; } Property Value Type Description Int32 Maps Declaration public MapInfo[] Maps { get; set; } Property Value Type Description MapInfo [] Width Declaration public int Width { get; set; } Property Value Type Description Int32 Implements IScreenMap Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Formats.Bitmap2FullImage.html": {
    "href": "api/Texim.Formats.Bitmap2FullImage.html",
    "title": "Class Bitmap2FullImage | Texim extensible image API",
    "keywords": "Class Bitmap2FullImage Inheritance Object Bitmap2FullImage Implements Yarhl.FileFormat.IConverter < Yarhl.IO.BinaryFormat , FullImage > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Bitmap2FullImage : Object Constructors Bitmap2FullImage() Declaration public Bitmap2FullImage() Methods Convert(BinaryFormat) Declaration public FullImage Convert(BinaryFormat source) Parameters Type Name Description Yarhl.IO.BinaryFormat source Returns Type Description FullImage Implements Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.FullImage2Bitmap.html": {
    "href": "api/Texim.Formats.FullImage2Bitmap.html",
    "title": "Class FullImage2Bitmap | Texim extensible image API",
    "keywords": "Class FullImage2Bitmap Inheritance Object FullImage2Bitmap Implements Yarhl.FileFormat.IInitializer < SixLabors.ImageSharp.Formats.IImageEncoder > Yarhl.FileFormat.IConverter < IFullImage , Yarhl.IO.BinaryFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class FullImage2Bitmap : Object Constructors FullImage2Bitmap() Declaration public FullImage2Bitmap() Methods Convert(IFullImage) Declaration public BinaryFormat Convert(IFullImage source) Parameters Type Name Description IFullImage source Returns Type Description Yarhl.IO.BinaryFormat Initialize(IImageEncoder) Declaration public void Initialize(IImageEncoder parameters) Parameters Type Name Description SixLabors.ImageSharp.Formats.IImageEncoder parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.html": {
    "href": "api/Texim.Formats.html",
    "title": "Namespace Texim.Formats | Texim extensible image API",
    "keywords": "Namespace Texim.Formats Classes Bitmap2FullImage FullImage2Bitmap IndexedImage2Bitmap IndexedImageBitmapParams Palette2BinaryRiff Palette2Bitmap PaletteCollection2ContainerBitmap RawBinary2IndexedImage RawBinary2PaletteCollection RawIndexedImageParams RawPaletteParams"
  },
  "api/Texim.Formats.IndexedImage2Bitmap.html": {
    "href": "api/Texim.Formats.IndexedImage2Bitmap.html",
    "title": "Class IndexedImage2Bitmap | Texim extensible image API",
    "keywords": "Class IndexedImage2Bitmap Inheritance Object IndexedImage2Bitmap Implements Yarhl.FileFormat.IInitializer < IndexedImageBitmapParams > Yarhl.FileFormat.IConverter < IIndexedImage , Yarhl.IO.BinaryFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class IndexedImage2Bitmap : Object Constructors IndexedImage2Bitmap() Declaration public IndexedImage2Bitmap() Methods Convert(IIndexedImage) Declaration public BinaryFormat Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description Yarhl.IO.BinaryFormat Initialize(IndexedImageBitmapParams) Declaration public void Initialize(IndexedImageBitmapParams parameters) Parameters Type Name Description IndexedImageBitmapParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.IndexedImageBitmapParams.html": {
    "href": "api/Texim.Formats.IndexedImageBitmapParams.html",
    "title": "Class IndexedImageBitmapParams | Texim extensible image API",
    "keywords": "Class IndexedImageBitmapParams Inheritance Object IndexedImageBitmapParams Namespace : Texim.Formats Assembly : Texim.dll Syntax public class IndexedImageBitmapParams : Object Constructors IndexedImageBitmapParams() Declaration public IndexedImageBitmapParams() Properties Encoder Declaration public IImageEncoder Encoder { get; set; } Property Value Type Description SixLabors.ImageSharp.Formats.IImageEncoder Palette Declaration public IPalette Palette { get; set; } Property Value Type Description IPalette Palettes Declaration public IPaletteCollection Palettes { get; set; } Property Value Type Description IPaletteCollection"
  },
  "api/Texim.Formats.Palette2BinaryRiff.html": {
    "href": "api/Texim.Formats.Palette2BinaryRiff.html",
    "title": "Class Palette2BinaryRiff | Texim extensible image API",
    "keywords": "Class Palette2BinaryRiff Inheritance Object Palette2BinaryRiff Implements Yarhl.FileFormat.IInitializer < Boolean > Yarhl.FileFormat.IConverter < IPalette , Yarhl.IO.BinaryFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Palette2BinaryRiff : Object Constructors Palette2BinaryRiff() Declaration public Palette2BinaryRiff() Properties GimpCompatibility Declaration public bool GimpCompatibility { get; set; } Property Value Type Description Boolean Version Declaration public static int Version { get; } Property Value Type Description Int32 Methods Convert(IPalette) Declaration public BinaryFormat Convert(IPalette source) Parameters Type Name Description IPalette source Returns Type Description Yarhl.IO.BinaryFormat Initialize(Boolean) Declaration public void Initialize(bool parameters) Parameters Type Name Description Boolean parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.Palette2Bitmap.html": {
    "href": "api/Texim.Formats.Palette2Bitmap.html",
    "title": "Class Palette2Bitmap | Texim extensible image API",
    "keywords": "Class Palette2Bitmap Inheritance Object Palette2Bitmap Implements Yarhl.FileFormat.IInitializer < SixLabors.ImageSharp.Formats.IImageEncoder > Yarhl.FileFormat.IConverter < IPalette , Yarhl.IO.BinaryFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class Palette2Bitmap : Object Constructors Palette2Bitmap() Declaration public Palette2Bitmap() Methods Convert(IPalette) Declaration public BinaryFormat Convert(IPalette source) Parameters Type Name Description IPalette source Returns Type Description Yarhl.IO.BinaryFormat Initialize(IImageEncoder) Declaration public void Initialize(IImageEncoder parameters) Parameters Type Name Description SixLabors.ImageSharp.Formats.IImageEncoder parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.PaletteCollection2ContainerBitmap.html": {
    "href": "api/Texim.Formats.PaletteCollection2ContainerBitmap.html",
    "title": "Class PaletteCollection2ContainerBitmap | Texim extensible image API",
    "keywords": "Class PaletteCollection2ContainerBitmap Inheritance Object PaletteCollection2ContainerBitmap Implements Yarhl.FileFormat.IInitializer < SixLabors.ImageSharp.Formats.IImageEncoder > Yarhl.FileFormat.IConverter < IPaletteCollection , Yarhl.FileSystem.NodeContainerFormat > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class PaletteCollection2ContainerBitmap : Object Constructors PaletteCollection2ContainerBitmap() Declaration public PaletteCollection2ContainerBitmap() Methods Convert(IPaletteCollection) Declaration public NodeContainerFormat Convert(IPaletteCollection source) Parameters Type Name Description IPaletteCollection source Returns Type Description Yarhl.FileSystem.NodeContainerFormat Initialize(IImageEncoder) Declaration public void Initialize(IImageEncoder parameters) Parameters Type Name Description SixLabors.ImageSharp.Formats.IImageEncoder parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.RawBinary2IndexedImage.html": {
    "href": "api/Texim.Formats.RawBinary2IndexedImage.html",
    "title": "Class RawBinary2IndexedImage | Texim extensible image API",
    "keywords": "Class RawBinary2IndexedImage Inheritance Object RawBinary2IndexedImage Implements Yarhl.FileFormat.IInitializer < RawIndexedImageParams > Yarhl.FileFormat.IConverter < Yarhl.IO.IBinary , IndexedImage > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawBinary2IndexedImage : Object Constructors RawBinary2IndexedImage() Declaration public RawBinary2IndexedImage() Methods Convert(IBinary) Declaration public IndexedImage Convert(IBinary source) Parameters Type Name Description Yarhl.IO.IBinary source Returns Type Description IndexedImage Initialize(RawIndexedImageParams) Declaration public void Initialize(RawIndexedImageParams parameters) Parameters Type Name Description RawIndexedImageParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.RawBinary2PaletteCollection.html": {
    "href": "api/Texim.Formats.RawBinary2PaletteCollection.html",
    "title": "Class RawBinary2PaletteCollection | Texim extensible image API",
    "keywords": "Class RawBinary2PaletteCollection Inheritance Object RawBinary2PaletteCollection Implements Yarhl.FileFormat.IInitializer < RawPaletteParams > Yarhl.FileFormat.IConverter < Yarhl.IO.BinaryFormat , PaletteCollection > Yarhl.FileFormat.IConverter Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawBinary2PaletteCollection : Object Constructors RawBinary2PaletteCollection() Declaration public RawBinary2PaletteCollection() Methods Convert(BinaryFormat) Declaration public PaletteCollection Convert(BinaryFormat source) Parameters Type Name Description Yarhl.IO.BinaryFormat source Returns Type Description PaletteCollection Initialize(RawPaletteParams) Declaration public void Initialize(RawPaletteParams parameters) Parameters Type Name Description RawPaletteParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Formats.RawIndexedImageParams.html": {
    "href": "api/Texim.Formats.RawIndexedImageParams.html",
    "title": "Class RawIndexedImageParams | Texim extensible image API",
    "keywords": "Class RawIndexedImageParams Inheritance Object RawIndexedImageParams Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawIndexedImageParams : Object Constructors RawIndexedImageParams() Declaration public RawIndexedImageParams() Properties Default Declaration public static RawIndexedImageParams Default { get; } Property Value Type Description RawIndexedImageParams Height Declaration public int Height { get; set; } Property Value Type Description Int32 Offset Declaration public long Offset { get; set; } Property Value Type Description Int64 PixelEncoding Declaration public IIndexedPixelEncoding PixelEncoding { get; set; } Property Value Type Description IIndexedPixelEncoding Size Declaration public int Size { get; set; } Property Value Type Description Int32 Swizzling Declaration public ISwizzling<IndexedPixel> Swizzling { get; set; } Property Value Type Description ISwizzling < IndexedPixel > Width Declaration public int Width { get; set; } Property Value Type Description Int32"
  },
  "api/Texim.Formats.RawPaletteParams.html": {
    "href": "api/Texim.Formats.RawPaletteParams.html",
    "title": "Class RawPaletteParams | Texim extensible image API",
    "keywords": "Class RawPaletteParams Inheritance Object RawPaletteParams Namespace : Texim.Formats Assembly : Texim.dll Syntax public class RawPaletteParams : Object Constructors RawPaletteParams() Declaration public RawPaletteParams() Properties ColorEncoding Declaration public IColorEncoding ColorEncoding { get; set; } Property Value Type Description IColorEncoding ColorsPerPalette Declaration public int ColorsPerPalette { get; set; } Property Value Type Description Int32 Default Declaration public static RawPaletteParams Default { get; } Property Value Type Description RawPaletteParams Offset Declaration public long Offset { get; set; } Property Value Type Description Int64 Size Declaration public int Size { get; set; } Property Value Type Description Int32"
  },
  "api/Texim.html": {
    "href": "api/Texim.html",
    "title": "Namespace Texim | Texim extensible image API",
    "keywords": "Namespace Texim Classes CollectionExtensions"
  },
  "api/Texim.Images.FullImage.html": {
    "href": "api/Texim.Images.FullImage.html",
    "title": "Class FullImage | Texim extensible image API",
    "keywords": "Class FullImage Inheritance Object FullImage Implements IFullImage Yarhl.FileFormat.IFormat Namespace : Texim.Images Assembly : Texim.dll Syntax public class FullImage : Object, IFullImage Constructors FullImage(Int32, Int32) Declaration public FullImage(int width, int height) Parameters Type Name Description Int32 width Int32 height Properties Height Declaration public int Height { get; set; } Property Value Type Description Int32 Pixels Declaration public Rgb[] Pixels { get; set; } Property Value Type Description Rgb [] Width Declaration public int Width { get; set; } Property Value Type Description Int32 Implements IFullImage Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Images.FullImage2IndexedPalette.html": {
    "href": "api/Texim.Images.FullImage2IndexedPalette.html",
    "title": "Class FullImage2IndexedPalette | Texim extensible image API",
    "keywords": "Class FullImage2IndexedPalette Inheritance Object FullImage2IndexedPalette Implements Yarhl.FileFormat.IInitializer < IQuantization > Yarhl.FileFormat.IConverter < IFullImage , IndexedPaletteImage > Yarhl.FileFormat.IConverter Namespace : Texim.Images Assembly : Texim.dll Syntax public class FullImage2IndexedPalette : Object Constructors FullImage2IndexedPalette() Declaration public FullImage2IndexedPalette() Methods Convert(IFullImage) Declaration public IndexedPaletteImage Convert(IFullImage source) Parameters Type Name Description IFullImage source Returns Type Description IndexedPaletteImage Initialize(IQuantization) Declaration public void Initialize(IQuantization parameters) Parameters Type Name Description IQuantization parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Images.html": {
    "href": "api/Texim.Images.html",
    "title": "Namespace Texim.Images | Texim extensible image API",
    "keywords": "Namespace Texim.Images Classes FullImage FullImage2IndexedPalette Indexed2FullImage IndexedImage IndexedPaletteImage Interfaces IFullImage IIndexedImage"
  },
  "api/Texim.Images.IFullImage.html": {
    "href": "api/Texim.Images.IFullImage.html",
    "title": "Interface IFullImage | Texim extensible image API",
    "keywords": "Interface IFullImage Namespace : Texim.Images Assembly : Texim.dll Syntax public interface IFullImage Properties Height Declaration int Height { get; } Property Value Type Description Int32 Pixels Declaration Rgb[] Pixels { get; } Property Value Type Description Rgb [] Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Images.IIndexedImage.html": {
    "href": "api/Texim.Images.IIndexedImage.html",
    "title": "Interface IIndexedImage | Texim extensible image API",
    "keywords": "Interface IIndexedImage Namespace : Texim.Images Assembly : Texim.dll Syntax public interface IIndexedImage Properties Height Declaration int Height { get; } Property Value Type Description Int32 Pixels Declaration IndexedPixel[] Pixels { get; } Property Value Type Description IndexedPixel [] Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Images.Indexed2FullImage.html": {
    "href": "api/Texim.Images.Indexed2FullImage.html",
    "title": "Class Indexed2FullImage | Texim extensible image API",
    "keywords": "Class Indexed2FullImage Inheritance Object Indexed2FullImage Implements Yarhl.FileFormat.IInitializer < IPalette > Yarhl.FileFormat.IInitializer < IPaletteCollection > Yarhl.FileFormat.IConverter < IIndexedImage , FullImage > Yarhl.FileFormat.IConverter Namespace : Texim.Images Assembly : Texim.dll Syntax public class Indexed2FullImage : Object Constructors Indexed2FullImage() Declaration public Indexed2FullImage() Methods Convert(IIndexedImage) Declaration public FullImage Convert(IIndexedImage source) Parameters Type Name Description IIndexedImage source Returns Type Description FullImage Initialize(IPalette) Declaration public void Initialize(IPalette parameters) Parameters Type Name Description IPalette parameters Initialize(IPaletteCollection) Declaration public void Initialize(IPaletteCollection parameters) Parameters Type Name Description IPaletteCollection parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Images.IndexedImage.html": {
    "href": "api/Texim.Images.IndexedImage.html",
    "title": "Class IndexedImage | Texim extensible image API",
    "keywords": "Class IndexedImage Inheritance Object IndexedImage Implements IIndexedImage Yarhl.FileFormat.IFormat Namespace : Texim.Images Assembly : Texim.dll Syntax public class IndexedImage : Object, IIndexedImage Constructors IndexedImage() Declaration public IndexedImage() IndexedImage(Int32, Int32) Declaration public IndexedImage(int width, int height) Parameters Type Name Description Int32 width Int32 height IndexedImage(Int32, Int32, IndexedPixel[]) Declaration public IndexedImage(int width, int height, IndexedPixel[] pixels) Parameters Type Name Description Int32 width Int32 height IndexedPixel [] pixels Properties Height Declaration public int Height { get; set; } Property Value Type Description Int32 Pixels Declaration public IndexedPixel[] Pixels { get; set; } Property Value Type Description IndexedPixel [] Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods CreateFullImage(IPalette) Declaration public FullImage CreateFullImage(IPalette palette) Parameters Type Name Description IPalette palette Returns Type Description FullImage CreateFullImage(IPaletteCollection) Declaration public FullImage CreateFullImage(IPaletteCollection palettes) Parameters Type Name Description IPaletteCollection palettes Returns Type Description FullImage Implements IIndexedImage Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Images.IndexedPaletteImage.html": {
    "href": "api/Texim.Images.IndexedPaletteImage.html",
    "title": "Class IndexedPaletteImage | Texim extensible image API",
    "keywords": "Class IndexedPaletteImage Inheritance Object IndexedPaletteImage Implements IIndexedImage IPaletteCollection Yarhl.FileFormat.IFormat Namespace : Texim.Images Assembly : Texim.dll Syntax public class IndexedPaletteImage : Object, IIndexedImage, IPaletteCollection Constructors IndexedPaletteImage() Declaration public IndexedPaletteImage() Properties Height Declaration public int Height { get; set; } Property Value Type Description Int32 Palettes Declaration public Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette > Pixels Declaration public IndexedPixel[] Pixels { get; set; } Property Value Type Description IndexedPixel [] Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods CreateFullImage() Declaration public FullImage CreateFullImage() Returns Type Description FullImage Implements IIndexedImage IPaletteCollection Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Palettes.html": {
    "href": "api/Texim.Palettes.html",
    "title": "Namespace Texim.Palettes | Texim extensible image API",
    "keywords": "Namespace Texim.Palettes Classes Palette PaletteCollection Interfaces IPalette IPaletteCollection"
  },
  "api/Texim.Palettes.IPalette.html": {
    "href": "api/Texim.Palettes.IPalette.html",
    "title": "Interface IPalette | Texim extensible image API",
    "keywords": "Interface IPalette Namespace : Texim.Palettes Assembly : Texim.dll Syntax public interface IPalette Properties Colors Declaration Collection<Rgb> Colors { get; } Property Value Type Description Collection < Rgb >"
  },
  "api/Texim.Palettes.IPaletteCollection.html": {
    "href": "api/Texim.Palettes.IPaletteCollection.html",
    "title": "Interface IPaletteCollection | Texim extensible image API",
    "keywords": "Interface IPaletteCollection Namespace : Texim.Palettes Assembly : Texim.dll Syntax public interface IPaletteCollection Properties Palettes Declaration Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette >"
  },
  "api/Texim.Palettes.Palette.html": {
    "href": "api/Texim.Palettes.Palette.html",
    "title": "Class Palette | Texim extensible image API",
    "keywords": "Class Palette Inheritance Object Palette Implements IPalette Yarhl.FileFormat.IFormat Namespace : Texim.Palettes Assembly : Texim.dll Syntax public class Palette : Object, IPalette Constructors Palette() Declaration public Palette() Palette(IEnumerable<Rgb>) Declaration public Palette(IEnumerable<Rgb> initialColors) Parameters Type Name Description IEnumerable < Rgb > initialColors Properties Colors Declaration public Collection<Rgb> Colors { get; } Property Value Type Description Collection < Rgb > Implements IPalette Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Palettes.PaletteCollection.html": {
    "href": "api/Texim.Palettes.PaletteCollection.html",
    "title": "Class PaletteCollection | Texim extensible image API",
    "keywords": "Class PaletteCollection Inheritance Object PaletteCollection Implements IPaletteCollection Yarhl.FileFormat.IFormat Namespace : Texim.Palettes Assembly : Texim.dll Syntax public class PaletteCollection : Object, IPaletteCollection Constructors PaletteCollection() Declaration public PaletteCollection() PaletteCollection(IEnumerable<IPalette>) Declaration public PaletteCollection(IEnumerable<IPalette> initialPalettes) Parameters Type Name Description IEnumerable < IPalette > initialPalettes PaletteCollection(IPalette) Declaration public PaletteCollection(IPalette initialPalette) Parameters Type Name Description IPalette initialPalette Properties Palettes Declaration public Collection<IPalette> Palettes { get; } Property Value Type Description Collection < IPalette > Implements IPaletteCollection Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Pixels.BytePixelEncoding.html": {
    "href": "api/Texim.Pixels.BytePixelEncoding.html",
    "title": "Class BytePixelEncoding | Texim extensible image API",
    "keywords": "Class BytePixelEncoding Inheritance Object BytePixelEncoding Indexed4Bpp Indexed8Bpp IndexedA3I5 IndexedA5I3 Implements IIndexedPixelEncoding Namespace : Texim.Pixels Assembly : Texim.dll Syntax public abstract class BytePixelEncoding : Object, IIndexedPixelEncoding Constructors BytePixelEncoding() Declaration protected BytePixelEncoding() Properties BitsPerPixel Declaration public abstract int BitsPerPixel { get; } Property Value Type Description Int32 Endianness Declaration public EndiannessMode Endianness { get; set; } Property Value Type Description Yarhl.IO.EndiannessMode Methods BitsToPixel(Byte) Declaration protected abstract IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Decode(Stream, Int32) Declaration public IndexedPixel[] Decode(Stream stream, int numPixels) Parameters Type Name Description Stream stream Int32 numPixels Returns Type Description IndexedPixel [] Decode(Span<Byte>) Declaration public IndexedPixel[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description IndexedPixel [] Encode(IEnumerable<IndexedPixel>) Declaration public byte[] Encode(IEnumerable<IndexedPixel> pixels) Parameters Type Name Description IEnumerable < IndexedPixel > pixels Returns Type Description Byte [] PixelToBits(IndexedPixel) Declaration protected abstract byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.html": {
    "href": "api/Texim.Pixels.html",
    "title": "Namespace Texim.Pixels | Texim extensible image API",
    "keywords": "Namespace Texim.Pixels Classes BytePixelEncoding Indexed4Bpp Indexed4BppBigEndian Indexed8Bpp IndexedA3I5 IndexedA5I3 IndexedPixel IOExtensions TileExtensions TileSwizzling<T> Interfaces IIndexedPixelEncoding ISwizzling<T>"
  },
  "api/Texim.Pixels.IIndexedPixelEncoding.html": {
    "href": "api/Texim.Pixels.IIndexedPixelEncoding.html",
    "title": "Interface IIndexedPixelEncoding | Texim extensible image API",
    "keywords": "Interface IIndexedPixelEncoding Namespace : Texim.Pixels Assembly : Texim.dll Syntax public interface IIndexedPixelEncoding Methods Decode(Stream, Int32) Declaration IndexedPixel[] Decode(Stream stream, int numPixels) Parameters Type Name Description Stream stream Int32 numPixels Returns Type Description IndexedPixel [] Decode(Span<Byte>) Declaration IndexedPixel[] Decode(Span<byte> data) Parameters Type Name Description Span < Byte > data Returns Type Description IndexedPixel [] Encode(IEnumerable<IndexedPixel>) Declaration byte[] Encode(IEnumerable<IndexedPixel> pixels) Parameters Type Name Description IEnumerable < IndexedPixel > pixels Returns Type Description Byte []"
  },
  "api/Texim.Pixels.Indexed4Bpp.html": {
    "href": "api/Texim.Pixels.Indexed4Bpp.html",
    "title": "Class Indexed4Bpp | Texim extensible image API",
    "keywords": "Class Indexed4Bpp Inheritance Object BytePixelEncoding Indexed4Bpp Indexed4BppBigEndian Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) BytePixelEncoding.Endianness Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class Indexed4Bpp : BytePixelEncoding, IIndexedPixelEncoding Constructors Indexed4Bpp() Declaration public Indexed4Bpp() Properties BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel Instance Declaration public static Indexed4Bpp Instance { get; } Property Value Type Description Indexed4Bpp Methods BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.Indexed4BppBigEndian.html": {
    "href": "api/Texim.Pixels.Indexed4BppBigEndian.html",
    "title": "Class Indexed4BppBigEndian | Texim extensible image API",
    "keywords": "Class Indexed4BppBigEndian Inheritance Object BytePixelEncoding Indexed4Bpp Indexed4BppBigEndian Implements IIndexedPixelEncoding Inherited Members Indexed4Bpp.BitsToPixel(Byte) Indexed4Bpp.PixelToBits(IndexedPixel) Indexed4Bpp.Instance Indexed4Bpp.BitsPerPixel BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) BytePixelEncoding.Endianness Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class Indexed4BppBigEndian : Indexed4Bpp, IIndexedPixelEncoding Constructors Indexed4BppBigEndian() Declaration public Indexed4BppBigEndian() Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.Indexed8Bpp.html": {
    "href": "api/Texim.Pixels.Indexed8Bpp.html",
    "title": "Class Indexed8Bpp | Texim extensible image API",
    "keywords": "Class Indexed8Bpp Inheritance Object BytePixelEncoding Indexed8Bpp Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) BytePixelEncoding.Endianness Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class Indexed8Bpp : BytePixelEncoding, IIndexedPixelEncoding Constructors Indexed8Bpp() Declaration public Indexed8Bpp() Properties BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel Instance Declaration public static Indexed8Bpp Instance { get; } Property Value Type Description Indexed8Bpp Methods BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.IndexedA3I5.html": {
    "href": "api/Texim.Pixels.IndexedA3I5.html",
    "title": "Class IndexedA3I5 | Texim extensible image API",
    "keywords": "Class IndexedA3I5 Inheritance Object BytePixelEncoding IndexedA3I5 Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) BytePixelEncoding.Endianness Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class IndexedA3I5 : BytePixelEncoding, IIndexedPixelEncoding Constructors IndexedA3I5() Declaration public IndexedA3I5() Properties BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel Instance Declaration public static IndexedA3I5 Instance { get; } Property Value Type Description IndexedA3I5 Methods BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.IndexedA5I3.html": {
    "href": "api/Texim.Pixels.IndexedA5I3.html",
    "title": "Class IndexedA5I3 | Texim extensible image API",
    "keywords": "Class IndexedA5I3 Inheritance Object BytePixelEncoding IndexedA5I3 Implements IIndexedPixelEncoding Inherited Members BytePixelEncoding.Decode(Stream, Int32) BytePixelEncoding.Decode(Span<Byte>) BytePixelEncoding.Encode(IEnumerable<IndexedPixel>) BytePixelEncoding.Endianness Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class IndexedA5I3 : BytePixelEncoding, IIndexedPixelEncoding Constructors IndexedA5I3() Declaration public IndexedA5I3() Properties BitsPerPixel Declaration public override int BitsPerPixel { get; } Property Value Type Description Int32 Overrides BytePixelEncoding.BitsPerPixel Instance Declaration public static IndexedA5I3 Instance { get; } Property Value Type Description IndexedA5I3 Methods BitsToPixel(Byte) Declaration protected override IndexedPixel BitsToPixel(byte data) Parameters Type Name Description Byte data Returns Type Description IndexedPixel Overrides BytePixelEncoding.BitsToPixel(Byte) PixelToBits(IndexedPixel) Declaration protected override byte PixelToBits(IndexedPixel pixel) Parameters Type Name Description IndexedPixel pixel Returns Type Description Byte Overrides BytePixelEncoding.PixelToBits(IndexedPixel) Implements IIndexedPixelEncoding"
  },
  "api/Texim.Pixels.IndexedPixel.html": {
    "href": "api/Texim.Pixels.IndexedPixel.html",
    "title": "Class IndexedPixel | Texim extensible image API",
    "keywords": "Class IndexedPixel Inheritance Object IndexedPixel Namespace : Texim.Pixels Assembly : Texim.dll Syntax public sealed class IndexedPixel : ValueType Constructors IndexedPixel(Int16) Declaration public IndexedPixel(short index) Parameters Type Name Description Int16 index IndexedPixel(Int16, Byte) Declaration public IndexedPixel(short index, byte alpha) Parameters Type Name Description Int16 index Byte alpha IndexedPixel(Int16, Byte, Byte) Declaration public IndexedPixel(short index, byte alpha, byte paletteIndex) Parameters Type Name Description Int16 index Byte alpha Byte paletteIndex Properties Alpha Declaration public byte Alpha { get; set; } Property Value Type Description Byte Index Declaration public short Index { get; set; } Property Value Type Description Int16 PaletteIndex Declaration public byte PaletteIndex { get; set; } Property Value Type Description Byte"
  },
  "api/Texim.Pixels.IOExtensions.html": {
    "href": "api/Texim.Pixels.IOExtensions.html",
    "title": "Class IOExtensions | Texim extensible image API",
    "keywords": "Class IOExtensions Inheritance Object IOExtensions Namespace : Texim.Pixels Assembly : Texim.dll Syntax public static class IOExtensions : Object Methods DecodePixelsAs<T>(Byte[]) Declaration public static IndexedPixel[] DecodePixelsAs<T>(this byte[] data) where T : IIndexedPixelEncoding, new() Parameters Type Name Description Byte [] data Returns Type Description IndexedPixel [] Type Parameters Name Description T EncodePixelsAs<T>(IndexedPixel[]) Declaration public static byte[] EncodePixelsAs<T>(this IndexedPixel[] pixels) where T : IIndexedPixelEncoding, new() Parameters Type Name Description IndexedPixel [] pixels Returns Type Description Byte [] Type Parameters Name Description T ReadPixels<T>(DataReader, Int32) Declaration public static IndexedPixel[] ReadPixels<T>(this DataReader reader, int numPixels) where T : IIndexedPixelEncoding, new() Parameters Type Name Description Yarhl.IO.DataReader reader Int32 numPixels Returns Type Description IndexedPixel [] Type Parameters Name Description T UnswizzleWith(IndexedPixel[], ISwizzling<IndexedPixel>) Declaration public static IndexedPixel[] UnswizzleWith(this IndexedPixel[] pixels, ISwizzling<IndexedPixel> swizzling) Parameters Type Name Description IndexedPixel [] pixels ISwizzling < IndexedPixel > swizzling Returns Type Description IndexedPixel [] Write<T>(DataWriter, IEnumerable<IndexedPixel>) Declaration public static void Write<T>(this DataWriter writer, IEnumerable<IndexedPixel> pixels) where T : IIndexedPixelEncoding, new() Parameters Type Name Description Yarhl.IO.DataWriter writer IEnumerable < IndexedPixel > pixels Type Parameters Name Description T"
  },
  "api/Texim.Pixels.ISwizzling-1.html": {
    "href": "api/Texim.Pixels.ISwizzling-1.html",
    "title": "Interface ISwizzling<T> | Texim extensible image API",
    "keywords": "Interface ISwizzling<T> Namespace : Texim.Pixels Assembly : Texim.dll Syntax public interface ISwizzling<T> Type Parameters Name Description T Methods Swizzle(IEnumerable<T>) Declaration T[] Swizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[] Unswizzle(IEnumerable<T>) Declaration T[] Unswizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[]"
  },
  "api/Texim.Pixels.TileExtensions.html": {
    "href": "api/Texim.Pixels.TileExtensions.html",
    "title": "Class TileExtensions | Texim extensible image API",
    "keywords": "Class TileExtensions Inheritance Object TileExtensions Namespace : Texim.Pixels Assembly : Texim.dll Syntax public static class TileExtensions : Object Methods FlipHorizontal(Memory<IndexedPixel>, Size) Declaration public static void FlipHorizontal(this Memory<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Memory < IndexedPixel > tile Size tileSize FlipHorizontal(Span<IndexedPixel>, Size) Declaration public static void FlipHorizontal(this Span<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Span < IndexedPixel > tile Size tileSize FlipVertical(Memory<IndexedPixel>, Size) Declaration public static void FlipVertical(this Memory<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Memory < IndexedPixel > tile Size tileSize FlipVertical(Span<IndexedPixel>, Size) Declaration public static void FlipVertical(this Span<IndexedPixel> tile, Size tileSize) Parameters Type Name Description Span < IndexedPixel > tile Size tileSize HasEquivalentIndexes(Memory<IndexedPixel>, Memory<IndexedPixel>) Declaration public static bool HasEquivalentIndexes(this Memory<IndexedPixel> tile1, Memory<IndexedPixel> tile2) Parameters Type Name Description Memory < IndexedPixel > tile1 Memory < IndexedPixel > tile2 Returns Type Description Boolean HasEquivalentIndexes(Span<IndexedPixel>, Span<IndexedPixel>) Declaration public static bool HasEquivalentIndexes(this Span<IndexedPixel> tile1, Span<IndexedPixel> tile2) Parameters Type Name Description Span < IndexedPixel > tile1 Span < IndexedPixel > tile2 Returns Type Description Boolean"
  },
  "api/Texim.Pixels.TileSwizzling-1.html": {
    "href": "api/Texim.Pixels.TileSwizzling-1.html",
    "title": "Class TileSwizzling<T> | Texim extensible image API",
    "keywords": "Class TileSwizzling<T> Inheritance Object TileSwizzling<T> Implements ISwizzling <T> Namespace : Texim.Pixels Assembly : Texim.dll Syntax public class TileSwizzling<T> : Object, ISwizzling<T> Type Parameters Name Description T Constructors TileSwizzling() Declaration public TileSwizzling() TileSwizzling(Size, Int32) Declaration public TileSwizzling(Size tileSize, int width) Parameters Type Name Description Size tileSize Int32 width TileSwizzling(Int32) Declaration public TileSwizzling(int width) Parameters Type Name Description Int32 width Properties TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods Swizzle(IEnumerable<T>) Declaration public T[] Swizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[] Unswizzle(IEnumerable<T>) Declaration public T[] Unswizzle(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description T[] Implements ISwizzling<T>"
  },
  "api/Texim.Processing.ExhaustiveColorSearch.html": {
    "href": "api/Texim.Processing.ExhaustiveColorSearch.html",
    "title": "Class ExhaustiveColorSearch | Texim extensible image API",
    "keywords": "Class ExhaustiveColorSearch Inheritance Object ExhaustiveColorSearch Namespace : Texim.Processing Assembly : Texim.dll Syntax public class ExhaustiveColorSearch : Object Constructors ExhaustiveColorSearch(IEnumerable<Rgb>) Declaration public ExhaustiveColorSearch(IEnumerable<Rgb> vertex) Parameters Type Name Description IEnumerable < Rgb > vertex Methods Search(IEnumerable<Rgb>, Rgb) Declaration public static (int, int) Search(IEnumerable<Rgb> vertex, Rgb color) Parameters Type Name Description IEnumerable < Rgb > vertex Rgb color Returns Type Description (, ) < Int32 , Int32 > Search(Rgb) Declaration public (int, int) Search(Rgb color) Parameters Type Name Description Rgb color Returns Type Description (, ) < Int32 , Int32 >"
  },
  "api/Texim.Processing.FixedPaletteQuantization.html": {
    "href": "api/Texim.Processing.FixedPaletteQuantization.html",
    "title": "Class FixedPaletteQuantization | Texim extensible image API",
    "keywords": "Class FixedPaletteQuantization Inheritance Object FixedPaletteQuantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class FixedPaletteQuantization : Object, IQuantization Constructors FixedPaletteQuantization(IPalette) Declaration public FixedPaletteQuantization(IPalette palette) Parameters Type Name Description IPalette palette Properties TransparentIndex Declaration public int TransparentIndex { get; set; } Property Value Type Description Int32 Methods Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description (, ) < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "api/Texim.Processing.FixedPaletteTileQuantization.html": {
    "href": "api/Texim.Processing.FixedPaletteTileQuantization.html",
    "title": "Class FixedPaletteTileQuantization | Texim extensible image API",
    "keywords": "Class FixedPaletteTileQuantization Inheritance Object FixedPaletteTileQuantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class FixedPaletteTileQuantization : Object, IQuantization Constructors FixedPaletteTileQuantization(IPaletteCollection, Size, Int32) Declaration public FixedPaletteTileQuantization(IPaletteCollection palettes, Size tileSize, int width) Parameters Type Name Description IPaletteCollection palettes Size tileSize Int32 width Properties FirstAsTransparent Declaration public bool FirstAsTransparent { get; set; } Property Value Type Description Boolean Methods Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description (, ) < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "api/Texim.Processing.html": {
    "href": "api/Texim.Processing.html",
    "title": "Namespace Texim.Processing | Texim extensible image API",
    "keywords": "Namespace Texim.Processing Classes ExhaustiveColorSearch FixedPaletteQuantization FixedPaletteTileQuantization MedianCutQuantization Quantization Interfaces IQuantization"
  },
  "api/Texim.Processing.IQuantization.html": {
    "href": "api/Texim.Processing.IQuantization.html",
    "title": "Interface IQuantization | Texim extensible image API",
    "keywords": "Interface IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public interface IQuantization Methods Quantize(Rgb[]) Declaration (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description (, ) < IndexedPixel [], IPaletteCollection >"
  },
  "api/Texim.Processing.MedianCutQuantization.html": {
    "href": "api/Texim.Processing.MedianCutQuantization.html",
    "title": "Class MedianCutQuantization | Texim extensible image API",
    "keywords": "Class MedianCutQuantization Inheritance Object MedianCutQuantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class MedianCutQuantization : Object, IQuantization Constructors MedianCutQuantization(Int32) Declaration public MedianCutQuantization(int maxColors) Parameters Type Name Description Int32 maxColors Properties MaxColors Declaration public int MaxColors { get; } Property Value Type Description Int32 Methods Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description (, ) < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "api/Texim.Processing.Quantization.html": {
    "href": "api/Texim.Processing.Quantization.html",
    "title": "Class Quantization | Texim extensible image API",
    "keywords": "Class Quantization Inheritance Object Quantization Implements IQuantization Namespace : Texim.Processing Assembly : Texim.dll Syntax public class Quantization : Object, IQuantization Constructors Quantization() Declaration public Quantization() Properties AlphaColor Declaration public Rgb AlphaColor { get; set; } Property Value Type Description Rgb FirstAsTransparent Declaration public bool FirstAsTransparent { get; set; } Property Value Type Description Boolean Methods Quantize(Rgb[]) Declaration public (IndexedPixel[], IPaletteCollection) Quantize(Rgb[] pixels) Parameters Type Name Description Rgb [] pixels Returns Type Description (, ) < IndexedPixel [], IPaletteCollection > Implements IQuantization"
  },
  "api/Texim.Sprites.html": {
    "href": "api/Texim.Sprites.html",
    "title": "Namespace Texim.Sprites | Texim extensible image API",
    "keywords": "Namespace Texim.Sprites Classes ImageSegment ImageSegment2IndexedImage ImageSegment2IndexedImageParams Sprite Sprite2IndexedImage Sprite2IndexedImageParams SpriteRelativeCoordinatesKind Interfaces IImageSegment ISprite"
  },
  "api/Texim.Sprites.IImageSegment.html": {
    "href": "api/Texim.Sprites.IImageSegment.html",
    "title": "Interface IImageSegment | Texim extensible image API",
    "keywords": "Interface IImageSegment Namespace : Texim.Sprites Assembly : Texim.dll Syntax public interface IImageSegment Properties CoordinateX Declaration int CoordinateX { get; } Property Value Type Description Int32 CoordinateY Declaration int CoordinateY { get; } Property Value Type Description Int32 Height Declaration int Height { get; } Property Value Type Description Int32 HorizontalFlip Declaration bool HorizontalFlip { get; } Property Value Type Description Boolean Layer Declaration int Layer { get; } Property Value Type Description Int32 PaletteIndex Declaration byte PaletteIndex { get; } Property Value Type Description Byte TileIndex Declaration short TileIndex { get; } Property Value Type Description Int16 VerticalFlip Declaration bool VerticalFlip { get; } Property Value Type Description Boolean Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Sprites.ImageSegment.html": {
    "href": "api/Texim.Sprites.ImageSegment.html",
    "title": "Class ImageSegment | Texim extensible image API",
    "keywords": "Class ImageSegment Inheritance Object ImageSegment Implements IImageSegment Namespace : Texim.Sprites Assembly : Texim.dll Syntax public class ImageSegment : Object, IImageSegment Constructors ImageSegment() Declaration public ImageSegment() Properties CoordinateX Declaration public int CoordinateX { get; set; } Property Value Type Description Int32 CoordinateY Declaration public int CoordinateY { get; set; } Property Value Type Description Int32 Height Declaration public int Height { get; set; } Property Value Type Description Int32 HorizontalFlip Declaration public bool HorizontalFlip { get; set; } Property Value Type Description Boolean Layer Declaration public int Layer { get; set; } Property Value Type Description Int32 PaletteIndex Declaration public byte PaletteIndex { get; set; } Property Value Type Description Byte TileIndex Declaration public short TileIndex { get; set; } Property Value Type Description Int16 VerticalFlip Declaration public bool VerticalFlip { get; set; } Property Value Type Description Boolean Width Declaration public int Width { get; set; } Property Value Type Description Int32 Implements IImageSegment"
  },
  "api/Texim.Sprites.ImageSegment2IndexedImage.html": {
    "href": "api/Texim.Sprites.ImageSegment2IndexedImage.html",
    "title": "Class ImageSegment2IndexedImage | Texim extensible image API",
    "keywords": "Class ImageSegment2IndexedImage Inheritance Object ImageSegment2IndexedImage Implements Yarhl.FileFormat.IInitializer < ImageSegment2IndexedImageParams > Yarhl.FileFormat.IConverter < IImageSegment , IndexedImage > Yarhl.FileFormat.IConverter Namespace : Texim.Sprites Assembly : Texim.dll Syntax public class ImageSegment2IndexedImage : Object Constructors ImageSegment2IndexedImage() Declaration public ImageSegment2IndexedImage() Methods Convert(IImageSegment) Declaration public IndexedImage Convert(IImageSegment source) Parameters Type Name Description IImageSegment source Returns Type Description IndexedImage Initialize(ImageSegment2IndexedImageParams) Declaration public void Initialize(ImageSegment2IndexedImageParams parameters) Parameters Type Name Description ImageSegment2IndexedImageParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Sprites.ImageSegment2IndexedImageParams.html": {
    "href": "api/Texim.Sprites.ImageSegment2IndexedImageParams.html",
    "title": "Class ImageSegment2IndexedImageParams | Texim extensible image API",
    "keywords": "Class ImageSegment2IndexedImageParams Inheritance Object ImageSegment2IndexedImageParams Namespace : Texim.Sprites Assembly : Texim.dll Syntax public class ImageSegment2IndexedImageParams : Object Constructors ImageSegment2IndexedImageParams() Declaration public ImageSegment2IndexedImageParams() Properties FullImage Declaration public IIndexedImage FullImage { get; set; } Property Value Type Description IIndexedImage OutOfBoundsTileIndex Declaration public int OutOfBoundsTileIndex { get; set; } Property Value Type Description Int32 TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size"
  },
  "api/Texim.Sprites.ISprite.html": {
    "href": "api/Texim.Sprites.ISprite.html",
    "title": "Interface ISprite | Texim extensible image API",
    "keywords": "Interface ISprite Namespace : Texim.Sprites Assembly : Texim.dll Syntax public interface ISprite Properties Height Declaration int Height { get; } Property Value Type Description Int32 Segments Declaration Collection<IImageSegment> Segments { get; } Property Value Type Description Collection < IImageSegment > Width Declaration int Width { get; } Property Value Type Description Int32"
  },
  "api/Texim.Sprites.Sprite.html": {
    "href": "api/Texim.Sprites.Sprite.html",
    "title": "Class Sprite | Texim extensible image API",
    "keywords": "Class Sprite Inheritance Object Sprite Implements ISprite Yarhl.FileFormat.IFormat Namespace : Texim.Sprites Assembly : Texim.dll Syntax public class Sprite : Object, ISprite Constructors Sprite() Declaration public Sprite() Properties Height Declaration public int Height { get; set; } Property Value Type Description Int32 Segments Declaration public Collection<IImageSegment> Segments { get; set; } Property Value Type Description Collection < IImageSegment > Width Declaration public int Width { get; set; } Property Value Type Description Int32 Implements ISprite Yarhl.FileFormat.IFormat"
  },
  "api/Texim.Sprites.Sprite2IndexedImage.html": {
    "href": "api/Texim.Sprites.Sprite2IndexedImage.html",
    "title": "Class Sprite2IndexedImage | Texim extensible image API",
    "keywords": "Class Sprite2IndexedImage Inheritance Object Sprite2IndexedImage Implements Yarhl.FileFormat.IInitializer < Sprite2IndexedImageParams > Yarhl.FileFormat.IConverter < ISprite , IndexedImage > Yarhl.FileFormat.IConverter Namespace : Texim.Sprites Assembly : Texim.dll Syntax public class Sprite2IndexedImage : Object Constructors Sprite2IndexedImage() Declaration public Sprite2IndexedImage() Methods Convert(ISprite) Declaration public IndexedImage Convert(ISprite source) Parameters Type Name Description ISprite source Returns Type Description IndexedImage Initialize(Sprite2IndexedImageParams) Declaration public void Initialize(Sprite2IndexedImageParams parameters) Parameters Type Name Description Sprite2IndexedImageParams parameters Implements Yarhl.FileFormat.IInitializer<> Yarhl.FileFormat.IConverter<, > Yarhl.FileFormat.IConverter"
  },
  "api/Texim.Sprites.Sprite2IndexedImageParams.html": {
    "href": "api/Texim.Sprites.Sprite2IndexedImageParams.html",
    "title": "Class Sprite2IndexedImageParams | Texim extensible image API",
    "keywords": "Class Sprite2IndexedImageParams Inheritance Object Sprite2IndexedImageParams Namespace : Texim.Sprites Assembly : Texim.dll Syntax public class Sprite2IndexedImageParams : Object Constructors Sprite2IndexedImageParams() Declaration public Sprite2IndexedImageParams() Properties FullImage Declaration public IIndexedImage FullImage { get; set; } Property Value Type Description IIndexedImage OutOfBoundsTileIndex Declaration public int OutOfBoundsTileIndex { get; set; } Property Value Type Description Int32 RelativeCoordinates Declaration public SpriteRelativeCoordinatesKind RelativeCoordinates { get; set; } Property Value Type Description SpriteRelativeCoordinatesKind TileSize Declaration public Size TileSize { get; set; } Property Value Type Description Size"
  },
  "api/Texim.Sprites.SpriteRelativeCoordinatesKind.html": {
    "href": "api/Texim.Sprites.SpriteRelativeCoordinatesKind.html",
    "title": "Class SpriteRelativeCoordinatesKind | Texim extensible image API",
    "keywords": "Class SpriteRelativeCoordinatesKind Inheritance Object SpriteRelativeCoordinatesKind Namespace : Texim.Sprites Assembly : Texim.dll Syntax public sealed class SpriteRelativeCoordinatesKind : Enum Fields Center Declaration public const SpriteRelativeCoordinatesKind Center Field Value Type Description SpriteRelativeCoordinatesKind TopLeft Declaration public const SpriteRelativeCoordinatesKind TopLeft Field Value Type Description SpriteRelativeCoordinatesKind value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the project | Texim extensible image API",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (April 09, 2021) | Texim extensible image API",
    "keywords": "vNext (April 09, 2021) As part of this release we had 21 issues closed. breaking #8 Remove old API bug #9 Fix warnings and issues enhancements #1 Implement workflow and C# template repo #2 Performance test for different types of Pixel structures #3 Upgrade Yarhl #4 Re-implementation of color and palette API #5 Implement NCCL format from Layton games #6 Implement NCLR palette format #7 Re-implementation of image API #10 Implement NCGR format #11 Implement color quantization API, algorithms and importers #12 Implement Nitro tile compression via map/screen data #13 Implement tile quantization with fixed palettes and merge image with map compression #14 Implement serializers for Nitro formats #15 Re-implement CLI #16 Implement read converters for \"raw\" formats and configure stable feed #17 Improve the CLI command to import compressed Nitro images #18 Implement CLI for raw formats and support for Megaman BG #19 ✨ 🐛 Implement 4bpp big endian and fix quantization bug #20 ✨ 🐛 Implement export sprites API and fix reading little endian pixels and quantization problems #21 ✨ Implement sprites of JUS (export)"
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to the project | Texim extensible image API",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "index.html": {
    "href": "index.html",
    "title": "Texim | Texim extensible image API",
    "keywords": "Texim Extensible API for image-related formats. It aims to provide an API to easily implement different image, palette, sprites and animation formats. Including typical image processing algorithms for importers or hardware swizzlers of different platforms. This is a proof-of-concept project for fast prototyping. In the future it will be Yarhl.Media.Images . There aren't stable releases, only preview. The API may suffer major refactors between minor versions. <!-- prettier-ignore --> Release Package Stable None Preview Azure Artifacts Documentation Feel free to ask any question in the project Discussion site! Check our on-line documentation . Build The project requires to build .NET 6 SDK and .NET Framework or Mono. If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  },
  "README.html": {
    "href": "README.html",
    "title": "Texim | Texim extensible image API",
    "keywords": "Texim Extensible API for image-related formats. It aims to provide an API to easily implement different image, palette, sprites and animation formats. Including typical image processing algorithms for importers or hardware swizzlers of different platforms. This is a proof-of-concept project for fast prototyping. In the future it will be Yarhl.Media.Images . There aren't stable releases, only preview. The API may suffer major refactors between minor versions. <!-- prettier-ignore --> Release Package Stable None Preview Azure Artifacts Documentation Feel free to ask any question in the project Discussion site! Check our on-line documentation . Build The project requires to build .NET 6 SDK and .NET Framework or Mono. If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  }
}